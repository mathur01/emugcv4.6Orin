//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2022 by EMGU Corporation. All rights reserved.
//
//  Vector of Float
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------



#include "vector_Float.h"

#if 1



std::vector< float >* VectorOfFloatCreate() 
{ 
   return new std::vector< float >(); 
}

std::vector< float >* VectorOfFloatCreateSize(int size) 
{ 
   return new std::vector< float >(size); 
}

int VectorOfFloatGetSize(std::vector< float >* v)
{
   return v->size();
}

void VectorOfFloatPush(std::vector< float >* v, float* value)
{
   v->push_back(*value);
}

void VectorOfFloatPushMulti(std::vector< float >* v,  float* values, int count)
{
   VectorPushMulti< float >(v, values, count);
}

void VectorOfFloatPushVector(std::vector< float >* v, std::vector< float >* other)
{  
   VectorOfFloatPushMulti(v,  &(*other)[0], other->size());
}

void VectorOfFloatClear(std::vector< float >* v)
{
   v->clear();
}

void VectorOfFloatRelease(std::vector< float >** v)
{
   delete *v;
   *v = 0;
}

void VectorOfFloatCopyData(std::vector< float >* v, float* data)
{
   VectorCopyData< float >(v, data);
}

float* VectorOfFloatGetStartAddress(std::vector< float >* v)
{
   return v->empty() ? NULL : &(*v)[0];
}

int64_t VectorOfFloatGetMemorySize(std::vector< float >* v)
{
   if (v->empty()) return 0;
   return (int64_t) (v->size() * sizeof(float));
}

void VectorOfFloatGetItem(std::vector<  float >* vec, int index,  float * element)
{
   *element = vec->at(index);
}

void VectorOfFloatGetItemPtr(std::vector<  float >* vec, int index,  float** element)
{ 
	*element = &vec->at(index);
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfFloat(std::vector< float >* vec)
{
   return new cv::_InputArray(*vec);
}

cv::_OutputArray* cveOutputArrayFromVectorOfFloat(std::vector< float >* vec)
{
   return new cv::_OutputArray(*vec);
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfFloat(std::vector< float >* vec)
{
   return new cv::_InputOutputArray(*vec);
}
#endif

int VectorOfFloatSizeOfItemInBytes()
{
   return sizeof(float);
}

#else

void* VectorOfFloatCreate()
{
  throw_no_vector();
}

void* VectorOfFloatCreateSize(int size)
{
  throw_no_vector();
}

int VectorOfFloatGetSize(void* v)
{
  throw_no_vector();
}

void VectorOfFloatPush(void* v, void* value)
{
  throw_no_vector();
}

void VectorOfFloatPushMulti(void* v, void* values, int count)
{
  throw_no_vector();
}

void VectorOfFloatPushVector(void* v, void* other)
{
  throw_no_vector();
}

void VectorOfFloatClear(void* v)
{
  throw_no_vector();
}

void VectorOfFloatRelease(void** v)
{
  throw_no_vector();
}

void VectorOfFloatCopyData(void* v,  void* data)
{
  throw_no_vector();
}

void* VectorOfFloatGetStartAddress(void* v)
{
  throw_no_vector();
}

void VectorOfFloatGetItem(void* vec, int index, void* element)
{
  throw_no_vector();
}

void VectorOfFloatGetItemPtr(void* vec, int index, void** element)
{
  throw_no_vector();
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfFloat(void* vec)
{
  throw_no_vector();
}

cv::_OutputArray* cveOutputArrayFromVectorOfFloat(void* vec)
{
  throw_no_vector();
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfFloat(void* vec)
{
  throw_no_vector();
}
#endif
 
int VectorOfFloatSizeOfItemInBytes()
{
  throw_no_vector();
}

#endif
