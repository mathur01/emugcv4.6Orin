//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2022 by EMGU Corporation. All rights reserved.
//
//  Vector of RotatedRect
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------



#include "vector_RotatedRect.h"

#if 1



std::vector< cv::RotatedRect >* VectorOfRotatedRectCreate() 
{ 
   return new std::vector< cv::RotatedRect >(); 
}

std::vector< cv::RotatedRect >* VectorOfRotatedRectCreateSize(int size) 
{ 
   return new std::vector< cv::RotatedRect >(size); 
}

int VectorOfRotatedRectGetSize(std::vector< cv::RotatedRect >* v)
{
   return v->size();
}

void VectorOfRotatedRectPush(std::vector< cv::RotatedRect >* v, cv::RotatedRect* value)
{
   v->push_back(*value);
}

void VectorOfRotatedRectPushMulti(std::vector< cv::RotatedRect >* v,  cv::RotatedRect* values, int count)
{
   VectorPushMulti< cv::RotatedRect >(v, values, count);
}

void VectorOfRotatedRectPushVector(std::vector< cv::RotatedRect >* v, std::vector< cv::RotatedRect >* other)
{  
   VectorOfRotatedRectPushMulti(v,  &(*other)[0], other->size());
}

void VectorOfRotatedRectClear(std::vector< cv::RotatedRect >* v)
{
   v->clear();
}

void VectorOfRotatedRectRelease(std::vector< cv::RotatedRect >** v)
{
   delete *v;
   *v = 0;
}

void VectorOfRotatedRectCopyData(std::vector< cv::RotatedRect >* v, cv::RotatedRect* data)
{
   VectorCopyData< cv::RotatedRect >(v, data);
}

cv::RotatedRect* VectorOfRotatedRectGetStartAddress(std::vector< cv::RotatedRect >* v)
{
   return v->empty() ? NULL : &(*v)[0];
}

int64_t VectorOfRotatedRectGetMemorySize(std::vector< cv::RotatedRect >* v)
{
   if (v->empty()) return 0;
   return (int64_t) (v->size() * sizeof(cv::RotatedRect));
}

void VectorOfRotatedRectGetItem(std::vector<  cv::RotatedRect >* vec, int index,  cv::RotatedRect * element)
{
   *element = vec->at(index);
}

void VectorOfRotatedRectGetItemPtr(std::vector<  cv::RotatedRect >* vec, int index,  cv::RotatedRect** element)
{ 
	*element = &vec->at(index);
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfRotatedRect(std::vector< cv::RotatedRect >* vec)
{
   return new cv::_InputArray(*vec);
}

cv::_OutputArray* cveOutputArrayFromVectorOfRotatedRect(std::vector< cv::RotatedRect >* vec)
{
   return new cv::_OutputArray(*vec);
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfRotatedRect(std::vector< cv::RotatedRect >* vec)
{
   return new cv::_InputOutputArray(*vec);
}
#endif

int VectorOfRotatedRectSizeOfItemInBytes()
{
   return sizeof(cv::RotatedRect);
}

#else

void* VectorOfRotatedRectCreate()
{
  throw_no_vector();
}

void* VectorOfRotatedRectCreateSize(int size)
{
  throw_no_vector();
}

int VectorOfRotatedRectGetSize(void* v)
{
  throw_no_vector();
}

void VectorOfRotatedRectPush(void* v, void* value)
{
  throw_no_vector();
}

void VectorOfRotatedRectPushMulti(void* v, void* values, int count)
{
  throw_no_vector();
}

void VectorOfRotatedRectPushVector(void* v, void* other)
{
  throw_no_vector();
}

void VectorOfRotatedRectClear(void* v)
{
  throw_no_vector();
}

void VectorOfRotatedRectRelease(void** v)
{
  throw_no_vector();
}

void VectorOfRotatedRectCopyData(void* v,  void* data)
{
  throw_no_vector();
}

void* VectorOfRotatedRectGetStartAddress(void* v)
{
  throw_no_vector();
}

void VectorOfRotatedRectGetItem(void* vec, int index, void* element)
{
  throw_no_vector();
}

void VectorOfRotatedRectGetItemPtr(void* vec, int index, void** element)
{
  throw_no_vector();
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfRotatedRect(void* vec)
{
  throw_no_vector();
}

cv::_OutputArray* cveOutputArrayFromVectorOfRotatedRect(void* vec)
{
  throw_no_vector();
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfRotatedRect(void* vec)
{
  throw_no_vector();
}
#endif
 
int VectorOfRotatedRectSizeOfItemInBytes()
{
  throw_no_vector();
}

#endif
