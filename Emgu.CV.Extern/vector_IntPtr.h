//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2022 by EMGU Corporation. All rights reserved.
//
//  Vector of IntPtr
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------


#pragma once
#ifndef EMGU_VECTOR_IntPtr_H
#define EMGU_VECTOR_IntPtr_H

#include "vectors_c.h"

#if 1



//----------------------------------------------------------------------------
//
//  Vector of IntPtr
//
//----------------------------------------------------------------------------
CVAPI(std::vector< void* >*) VectorOfIntPtrCreate();

CVAPI(std::vector< void* >*) VectorOfIntPtrCreateSize(int size);

CVAPI(int) VectorOfIntPtrGetSize(std::vector< void* >* v);

CVAPI(void) VectorOfIntPtrPush(std::vector< void* >* v, void** value);

CVAPI(void) VectorOfIntPtrPushMulti(std::vector< void* >* v, void** values, int count);

CVAPI(void) VectorOfIntPtrPushVector(std::vector< void* >* v, std::vector< void* >* other);

CVAPI(void) VectorOfIntPtrClear(std::vector< void* >* v);

CVAPI(void) VectorOfIntPtrRelease(std::vector< void* >** v);

CVAPI(void) VectorOfIntPtrCopyData(std::vector< void* >* v,  void** data);

CVAPI(void**) VectorOfIntPtrGetStartAddress(std::vector< void* >* v);

CVAPI(int64_t) VectorOfIntPtrGetMemorySize(std::vector< void* >* v);

CVAPI(void) VectorOfIntPtrGetItem(std::vector<  void* >* vec, int index,  void** element);

CVAPI(void) VectorOfIntPtrGetItemPtr(std::vector<  void* >* vec, int index,  void*** element);

#if false
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfIntPtr(std::vector< void* >* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfIntPtr(std::vector< void* >* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfIntPtr(std::vector< void* >* vec);
#endif

CVAPI(int) VectorOfIntPtrSizeOfItemInBytes();

#else

static inline CV_NORETURN void throw_no_vector() { CV_Error(cv::Error::StsBadFunc, "The library is compiled without VectorOfIntPtr support"); }

CVAPI(void*) VectorOfIntPtrCreate();

CVAPI(void*) VectorOfIntPtrCreateSize(int size);

CVAPI(int) VectorOfIntPtrGetSize(void* v);

CVAPI(void) VectorOfIntPtrPush(void* v, void* value);

CVAPI(void) VectorOfIntPtrPushMulti(void* v, void* values, int count);

CVAPI(void) VectorOfIntPtrPushVector(void* v, void* other);

CVAPI(void) VectorOfIntPtrClear(void* v);

CVAPI(void) VectorOfIntPtrRelease(void** v);

CVAPI(void) VectorOfIntPtrCopyData(void* v,  void* data);

CVAPI(void*) VectorOfIntPtrGetStartAddress(void* v);

CVAPI(void) VectorOfIntPtrGetItem(void* vec, int index, void* element);

CVAPI(void) VectorOfIntPtrGetItemPtr(void* vec, int index, void** element);

#if false
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOfIntPtr(void* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOfIntPtr(void* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOfIntPtr(void* vec);
#endif

CVAPI(int) VectorOfIntPtrSizeOfItemInBytes();
#endif


#endif
