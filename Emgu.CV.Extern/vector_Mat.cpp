//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2022 by EMGU Corporation. All rights reserved.
//
//  Vector of Mat
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------



#include "vector_Mat.h"

#if 1



std::vector< cv::Mat >* VectorOfMatCreate() 
{
   return new std::vector< cv::Mat >(); 
}

std::vector< cv::Mat >* VectorOfMatCreateSize(int size) 
{
   return new std::vector< cv::Mat >(size); 
}

int VectorOfMatGetSize(std::vector< cv::Mat >* v)
{
   return v->size();
}


void VectorOfMatPush(std::vector< cv::Mat >* v, cv::Mat* value)
{
   v->push_back(*value);
}

//void VectorOfMatPushMulti(std::vector< cv::Mat >* v,  cv::Mat* values, int count)
//{
//   VectorPushMulti< cv::Mat >(v, values, count);
//}

void VectorOfMatPushVector(std::vector< cv::Mat >* v, std::vector< cv::Mat >* other)
{
   v->insert(v->end(), other->begin(), other->end());
}

void VectorOfMatClear(std::vector< cv::Mat >* v)
{
   v->clear();
}

void VectorOfMatRelease(std::vector< cv::Mat >** v)
{
   delete *v;
   *v = 0;
}

void VectorOfMatCopyData(std::vector< cv::Mat >* v, cv::Mat* data)
{
   VectorCopyData< cv::Mat >(v, data);
}

cv::Mat* VectorOfMatGetStartAddress(std::vector< cv::Mat >* v)
{
   return v->empty() ? NULL : &(*v)[0];
}

int64_t VectorOfMatGetMemorySize(std::vector< cv::Mat >* v)
{
   if (v->empty()) return 0;
   return (int64_t) (v->size() * sizeof(cv::Mat));
}

void VectorOfMatGetItemPtr(std::vector<  cv::Mat >* vec, int index,  cv::Mat** element)
{
   *element = &vec->at(index);
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfMat(std::vector< cv::Mat >* vec)
{
   return new cv::_InputArray(*vec);
}

cv::_OutputArray* cveOutputArrayFromVectorOfMat(std::vector< cv::Mat >* vec)
{
   return new cv::_OutputArray(*vec);
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfMat(std::vector< cv::Mat >* vec)
{
   return new cv::_InputOutputArray(*vec);
}
#endif

int VectorOfMatSizeOfItemInBytes()
{
   return sizeof(cv::Mat);
}

#else

void * VectorOfMatCreate()
{
   throw_no_vector();
}

void * VectorOfMatCreateSize(int size)
{
   throw_no_vector();
}

int VectorOfMatGetSize(void* v)
{
   throw_no_vector();
}

void VectorOfMatPush(void* v, void* value)
{
   throw_no_vector();
}

//CVAPI(void) VectorOfMatPushMulti(std::vector< cv::Mat >* v, cv::Mat* values, int count);

void VectorOfMatPushVector(void* v, void* other)
{
   throw_no_vector();
}

void VectorOfMatClear(void* v)
{
   throw_no_vector();
}

void VectorOfMatRelease(void** v)
{
   throw_no_vector();
}

void VectorOfMatCopyData(void* v, void* data)
{
   throw_no_vector();
}

void* VectorOfMatGetStartAddress(void* v)
{
   throw_no_vector();
}

void VectorOfMatGetItemPtr(void* vec, int index,  void** element)
{
   throw_no_vector();
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfMat(void* vec)
{
   throw_no_vector();
}

cv::_OutputArray* cveOutputArrayFromVectorOfMat(void* vec)
{
   throw_no_vector();
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfMat(void* vec)
{
   throw_no_vector();
}
#endif

int VectorOfMatSizeOfItemInBytes()
{
   throw_no_vector();
}


#endif
