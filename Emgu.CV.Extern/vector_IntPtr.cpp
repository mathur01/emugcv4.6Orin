//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2022 by EMGU Corporation. All rights reserved.
//
//  Vector of IntPtr
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------



#include "vector_IntPtr.h"

#if 1



std::vector< void* >* VectorOfIntPtrCreate() 
{ 
   return new std::vector< void* >(); 
}

std::vector< void* >* VectorOfIntPtrCreateSize(int size) 
{ 
   return new std::vector< void* >(size); 
}

int VectorOfIntPtrGetSize(std::vector< void* >* v)
{
   return v->size();
}

void VectorOfIntPtrPush(std::vector< void* >* v, void** value)
{
   v->push_back(*value);
}

void VectorOfIntPtrPushMulti(std::vector< void* >* v,  void** values, int count)
{
   VectorPushMulti< void* >(v, values, count);
}

void VectorOfIntPtrPushVector(std::vector< void* >* v, std::vector< void* >* other)
{  
   VectorOfIntPtrPushMulti(v,  &(*other)[0], other->size());
}

void VectorOfIntPtrClear(std::vector< void* >* v)
{
   v->clear();
}

void VectorOfIntPtrRelease(std::vector< void* >** v)
{
   delete *v;
   *v = 0;
}

void VectorOfIntPtrCopyData(std::vector< void* >* v, void** data)
{
   VectorCopyData< void* >(v, data);
}

void** VectorOfIntPtrGetStartAddress(std::vector< void* >* v)
{
   return v->empty() ? NULL : &(*v)[0];
}

int64_t VectorOfIntPtrGetMemorySize(std::vector< void* >* v)
{
   if (v->empty()) return 0;
   return (int64_t) (v->size() * sizeof(void*));
}

void VectorOfIntPtrGetItem(std::vector<  void* >* vec, int index,  void* * element)
{
   *element = vec->at(index);
}

void VectorOfIntPtrGetItemPtr(std::vector<  void* >* vec, int index,  void*** element)
{ 
	*element = &vec->at(index);
}

#if false
cv::_InputArray* cveInputArrayFromVectorOfIntPtr(std::vector< void* >* vec)
{
   return new cv::_InputArray(*vec);
}

cv::_OutputArray* cveOutputArrayFromVectorOfIntPtr(std::vector< void* >* vec)
{
   return new cv::_OutputArray(*vec);
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfIntPtr(std::vector< void* >* vec)
{
   return new cv::_InputOutputArray(*vec);
}
#endif

int VectorOfIntPtrSizeOfItemInBytes()
{
   return sizeof(void*);
}

#else

void* VectorOfIntPtrCreate()
{
  throw_no_vector();
}

void* VectorOfIntPtrCreateSize(int size)
{
  throw_no_vector();
}

int VectorOfIntPtrGetSize(void* v)
{
  throw_no_vector();
}

void VectorOfIntPtrPush(void* v, void* value)
{
  throw_no_vector();
}

void VectorOfIntPtrPushMulti(void* v, void* values, int count)
{
  throw_no_vector();
}

void VectorOfIntPtrPushVector(void* v, void* other)
{
  throw_no_vector();
}

void VectorOfIntPtrClear(void* v)
{
  throw_no_vector();
}

void VectorOfIntPtrRelease(void** v)
{
  throw_no_vector();
}

void VectorOfIntPtrCopyData(void* v,  void* data)
{
  throw_no_vector();
}

void* VectorOfIntPtrGetStartAddress(void* v)
{
  throw_no_vector();
}

void VectorOfIntPtrGetItem(void* vec, int index, void* element)
{
  throw_no_vector();
}

void VectorOfIntPtrGetItemPtr(void* vec, int index, void** element)
{
  throw_no_vector();
}

#if false
cv::_InputArray* cveInputArrayFromVectorOfIntPtr(void* vec)
{
  throw_no_vector();
}

cv::_OutputArray* cveOutputArrayFromVectorOfIntPtr(void* vec)
{
  throw_no_vector();
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfIntPtr(void* vec)
{
  throw_no_vector();
}
#endif
 
int VectorOfIntPtrSizeOfItemInBytes()
{
  throw_no_vector();
}

#endif
