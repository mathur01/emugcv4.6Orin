//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2022 by EMGU Corporation. All rights reserved.
//
//  Vector of Byte
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------



#include "vector_Byte.h"

#if 1



std::vector< unsigned char >* VectorOfByteCreate() 
{ 
   return new std::vector< unsigned char >(); 
}

std::vector< unsigned char >* VectorOfByteCreateSize(int size) 
{ 
   return new std::vector< unsigned char >(size); 
}

int VectorOfByteGetSize(std::vector< unsigned char >* v)
{
   return v->size();
}

void VectorOfBytePush(std::vector< unsigned char >* v, unsigned char* value)
{
   v->push_back(*value);
}

void VectorOfBytePushMulti(std::vector< unsigned char >* v,  unsigned char* values, int count)
{
   VectorPushMulti< unsigned char >(v, values, count);
}

void VectorOfBytePushVector(std::vector< unsigned char >* v, std::vector< unsigned char >* other)
{  
   VectorOfBytePushMulti(v,  &(*other)[0], other->size());
}

void VectorOfByteClear(std::vector< unsigned char >* v)
{
   v->clear();
}

void VectorOfByteRelease(std::vector< unsigned char >** v)
{
   delete *v;
   *v = 0;
}

void VectorOfByteCopyData(std::vector< unsigned char >* v, unsigned char* data)
{
   VectorCopyData< unsigned char >(v, data);
}

unsigned char* VectorOfByteGetStartAddress(std::vector< unsigned char >* v)
{
   return v->empty() ? NULL : &(*v)[0];
}

int64_t VectorOfByteGetMemorySize(std::vector< unsigned char >* v)
{
   if (v->empty()) return 0;
   return (int64_t) (v->size() * sizeof(unsigned char));
}

void VectorOfByteGetItem(std::vector<  unsigned char >* vec, int index,  unsigned char * element)
{
   *element = vec->at(index);
}

void VectorOfByteGetItemPtr(std::vector<  unsigned char >* vec, int index,  unsigned char** element)
{ 
	*element = &vec->at(index);
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfByte(std::vector< unsigned char >* vec)
{
   return new cv::_InputArray(*vec);
}

cv::_OutputArray* cveOutputArrayFromVectorOfByte(std::vector< unsigned char >* vec)
{
   return new cv::_OutputArray(*vec);
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfByte(std::vector< unsigned char >* vec)
{
   return new cv::_InputOutputArray(*vec);
}
#endif

int VectorOfByteSizeOfItemInBytes()
{
   return sizeof(unsigned char);
}

#else

void* VectorOfByteCreate()
{
  throw_no_vector();
}

void* VectorOfByteCreateSize(int size)
{
  throw_no_vector();
}

int VectorOfByteGetSize(void* v)
{
  throw_no_vector();
}

void VectorOfBytePush(void* v, void* value)
{
  throw_no_vector();
}

void VectorOfBytePushMulti(void* v, void* values, int count)
{
  throw_no_vector();
}

void VectorOfBytePushVector(void* v, void* other)
{
  throw_no_vector();
}

void VectorOfByteClear(void* v)
{
  throw_no_vector();
}

void VectorOfByteRelease(void** v)
{
  throw_no_vector();
}

void VectorOfByteCopyData(void* v,  void* data)
{
  throw_no_vector();
}

void* VectorOfByteGetStartAddress(void* v)
{
  throw_no_vector();
}

void VectorOfByteGetItem(void* vec, int index, void* element)
{
  throw_no_vector();
}

void VectorOfByteGetItemPtr(void* vec, int index, void** element)
{
  throw_no_vector();
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfByte(void* vec)
{
  throw_no_vector();
}

cv::_OutputArray* cveOutputArrayFromVectorOfByte(void* vec)
{
  throw_no_vector();
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfByte(void* vec)
{
  throw_no_vector();
}
#endif
 
int VectorOfByteSizeOfItemInBytes()
{
  throw_no_vector();
}

#endif
