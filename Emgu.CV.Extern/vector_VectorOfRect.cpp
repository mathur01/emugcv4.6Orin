//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2022 by EMGU Corporation. All rights reserved.
//
//  Vector of VectorOfRect
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------



#include "vector_VectorOfRect.h"

#if 1



std::vector< std::vector< cv::Rect > >* VectorOfVectorOfRectCreate() 
{
   return new std::vector< std::vector< cv::Rect > >(); 
}

std::vector< std::vector< cv::Rect > >* VectorOfVectorOfRectCreateSize(int size) 
{
   return new std::vector< std::vector< cv::Rect > >(size); 
}

int VectorOfVectorOfRectGetSize(std::vector< std::vector< cv::Rect > >* v)
{
   return v->size();
}


void VectorOfVectorOfRectPush(std::vector< std::vector< cv::Rect > >* v, std::vector< cv::Rect >* value)
{
   v->push_back(*value);
}

//void VectorOfVectorOfRectPushMulti(std::vector< std::vector< cv::Rect > >* v,  std::vector< cv::Rect >* values, int count)
//{
//   VectorPushMulti< std::vector< cv::Rect > >(v, values, count);
//}

void VectorOfVectorOfRectPushVector(std::vector< std::vector< cv::Rect > >* v, std::vector< std::vector< cv::Rect > >* other)
{
   v->insert(v->end(), other->begin(), other->end());
}

void VectorOfVectorOfRectClear(std::vector< std::vector< cv::Rect > >* v)
{
   v->clear();
}

void VectorOfVectorOfRectRelease(std::vector< std::vector< cv::Rect > >** v)
{
   delete *v;
   *v = 0;
}

void VectorOfVectorOfRectCopyData(std::vector< std::vector< cv::Rect > >* v, std::vector< cv::Rect >* data)
{
   VectorCopyData< std::vector< cv::Rect > >(v, data);
}

std::vector< cv::Rect >* VectorOfVectorOfRectGetStartAddress(std::vector< std::vector< cv::Rect > >* v)
{
   return v->empty() ? NULL : &(*v)[0];
}

int64_t VectorOfVectorOfRectGetMemorySize(std::vector< std::vector< cv::Rect > >* v)
{
   if (v->empty()) return 0;
   return (int64_t) (v->size() * sizeof(std::vector< cv::Rect >));
}

void VectorOfVectorOfRectGetItemPtr(std::vector<  std::vector< cv::Rect > >* vec, int index,  std::vector< cv::Rect >** element)
{
   *element = &vec->at(index);
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfVectorOfRect(std::vector< std::vector< cv::Rect > >* vec)
{
   return new cv::_InputArray(*vec);
}

cv::_OutputArray* cveOutputArrayFromVectorOfVectorOfRect(std::vector< std::vector< cv::Rect > >* vec)
{
   return new cv::_OutputArray(*vec);
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfVectorOfRect(std::vector< std::vector< cv::Rect > >* vec)
{
   return new cv::_InputOutputArray(*vec);
}
#endif

int VectorOfVectorOfRectSizeOfItemInBytes()
{
   return sizeof(std::vector< cv::Rect >);
}

#else

void * VectorOfVectorOfRectCreate()
{
   throw_no_vector();
}

void * VectorOfVectorOfRectCreateSize(int size)
{
   throw_no_vector();
}

int VectorOfVectorOfRectGetSize(void* v)
{
   throw_no_vector();
}

void VectorOfVectorOfRectPush(void* v, void* value)
{
   throw_no_vector();
}

//CVAPI(void) VectorOfVectorOfRectPushMulti(std::vector< std::vector< cv::Rect > >* v, std::vector< cv::Rect >* values, int count);

void VectorOfVectorOfRectPushVector(void* v, void* other)
{
   throw_no_vector();
}

void VectorOfVectorOfRectClear(void* v)
{
   throw_no_vector();
}

void VectorOfVectorOfRectRelease(void** v)
{
   throw_no_vector();
}

void VectorOfVectorOfRectCopyData(void* v, void* data)
{
   throw_no_vector();
}

void* VectorOfVectorOfRectGetStartAddress(void* v)
{
   throw_no_vector();
}

void VectorOfVectorOfRectGetItemPtr(void* vec, int index,  void** element)
{
   throw_no_vector();
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfVectorOfRect(void* vec)
{
   throw_no_vector();
}

cv::_OutputArray* cveOutputArrayFromVectorOfVectorOfRect(void* vec)
{
   throw_no_vector();
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfVectorOfRect(void* vec)
{
   throw_no_vector();
}
#endif

int VectorOfVectorOfRectSizeOfItemInBytes()
{
   throw_no_vector();
}


#endif
