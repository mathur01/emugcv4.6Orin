//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2022 by EMGU Corporation. All rights reserved.
//
//  Vector of DMatch
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------



#include "vector_DMatch.h"

#if 1



std::vector< cv::DMatch >* VectorOfDMatchCreate() 
{ 
   return new std::vector< cv::DMatch >(); 
}

std::vector< cv::DMatch >* VectorOfDMatchCreateSize(int size) 
{ 
   return new std::vector< cv::DMatch >(size); 
}

int VectorOfDMatchGetSize(std::vector< cv::DMatch >* v)
{
   return v->size();
}

void VectorOfDMatchPush(std::vector< cv::DMatch >* v, cv::DMatch* value)
{
   v->push_back(*value);
}

void VectorOfDMatchPushMulti(std::vector< cv::DMatch >* v,  cv::DMatch* values, int count)
{
   VectorPushMulti< cv::DMatch >(v, values, count);
}

void VectorOfDMatchPushVector(std::vector< cv::DMatch >* v, std::vector< cv::DMatch >* other)
{  
   VectorOfDMatchPushMulti(v,  &(*other)[0], other->size());
}

void VectorOfDMatchClear(std::vector< cv::DMatch >* v)
{
   v->clear();
}

void VectorOfDMatchRelease(std::vector< cv::DMatch >** v)
{
   delete *v;
   *v = 0;
}

void VectorOfDMatchCopyData(std::vector< cv::DMatch >* v, cv::DMatch* data)
{
   VectorCopyData< cv::DMatch >(v, data);
}

cv::DMatch* VectorOfDMatchGetStartAddress(std::vector< cv::DMatch >* v)
{
   return v->empty() ? NULL : &(*v)[0];
}

int64_t VectorOfDMatchGetMemorySize(std::vector< cv::DMatch >* v)
{
   if (v->empty()) return 0;
   return (int64_t) (v->size() * sizeof(cv::DMatch));
}

void VectorOfDMatchGetItem(std::vector<  cv::DMatch >* vec, int index,  cv::DMatch * element)
{
   *element = vec->at(index);
}

void VectorOfDMatchGetItemPtr(std::vector<  cv::DMatch >* vec, int index,  cv::DMatch** element)
{ 
	*element = &vec->at(index);
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfDMatch(std::vector< cv::DMatch >* vec)
{
   return new cv::_InputArray(*vec);
}

cv::_OutputArray* cveOutputArrayFromVectorOfDMatch(std::vector< cv::DMatch >* vec)
{
   return new cv::_OutputArray(*vec);
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfDMatch(std::vector< cv::DMatch >* vec)
{
   return new cv::_InputOutputArray(*vec);
}
#endif

int VectorOfDMatchSizeOfItemInBytes()
{
   return sizeof(cv::DMatch);
}

#else

void* VectorOfDMatchCreate()
{
  throw_no_vector();
}

void* VectorOfDMatchCreateSize(int size)
{
  throw_no_vector();
}

int VectorOfDMatchGetSize(void* v)
{
  throw_no_vector();
}

void VectorOfDMatchPush(void* v, void* value)
{
  throw_no_vector();
}

void VectorOfDMatchPushMulti(void* v, void* values, int count)
{
  throw_no_vector();
}

void VectorOfDMatchPushVector(void* v, void* other)
{
  throw_no_vector();
}

void VectorOfDMatchClear(void* v)
{
  throw_no_vector();
}

void VectorOfDMatchRelease(void** v)
{
  throw_no_vector();
}

void VectorOfDMatchCopyData(void* v,  void* data)
{
  throw_no_vector();
}

void* VectorOfDMatchGetStartAddress(void* v)
{
  throw_no_vector();
}

void VectorOfDMatchGetItem(void* vec, int index, void* element)
{
  throw_no_vector();
}

void VectorOfDMatchGetItemPtr(void* vec, int index, void** element)
{
  throw_no_vector();
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfDMatch(void* vec)
{
  throw_no_vector();
}

cv::_OutputArray* cveOutputArrayFromVectorOfDMatch(void* vec)
{
  throw_no_vector();
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfDMatch(void* vec)
{
  throw_no_vector();
}
#endif
 
int VectorOfDMatchSizeOfItemInBytes()
{
  throw_no_vector();
}

#endif
