//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2022 by EMGU Corporation. All rights reserved.
//
//  Vector of GMat
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------



#include "vector_GMat.h"

#if defined(HAVE_OPENCV_GAPI)



std::vector< cv::GMat >* VectorOfGMatCreate() 
{
   return new std::vector< cv::GMat >(); 
}

std::vector< cv::GMat >* VectorOfGMatCreateSize(int size) 
{
   return new std::vector< cv::GMat >(size); 
}

int VectorOfGMatGetSize(std::vector< cv::GMat >* v)
{
   return v->size();
}


void VectorOfGMatPush(std::vector< cv::GMat >* v, cv::GMat* value)
{
   v->push_back(*value);
}

//void VectorOfGMatPushMulti(std::vector< cv::GMat >* v,  cv::GMat* values, int count)
//{
//   VectorPushMulti< cv::GMat >(v, values, count);
//}

void VectorOfGMatPushVector(std::vector< cv::GMat >* v, std::vector< cv::GMat >* other)
{
   v->insert(v->end(), other->begin(), other->end());
}

void VectorOfGMatClear(std::vector< cv::GMat >* v)
{
   v->clear();
}

void VectorOfGMatRelease(std::vector< cv::GMat >** v)
{
   delete *v;
   *v = 0;
}

void VectorOfGMatCopyData(std::vector< cv::GMat >* v, cv::GMat* data)
{
   VectorCopyData< cv::GMat >(v, data);
}

cv::GMat* VectorOfGMatGetStartAddress(std::vector< cv::GMat >* v)
{
   return v->empty() ? NULL : &(*v)[0];
}

int64_t VectorOfGMatGetMemorySize(std::vector< cv::GMat >* v)
{
   if (v->empty()) return 0;
   return (int64_t) (v->size() * sizeof(cv::GMat));
}

void VectorOfGMatGetItemPtr(std::vector<  cv::GMat >* vec, int index,  cv::GMat** element)
{
   *element = &vec->at(index);
}

#if false
cv::_InputArray* cveInputArrayFromVectorOfGMat(std::vector< cv::GMat >* vec)
{
   return new cv::_InputArray(*vec);
}

cv::_OutputArray* cveOutputArrayFromVectorOfGMat(std::vector< cv::GMat >* vec)
{
   return new cv::_OutputArray(*vec);
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfGMat(std::vector< cv::GMat >* vec)
{
   return new cv::_InputOutputArray(*vec);
}
#endif

int VectorOfGMatSizeOfItemInBytes()
{
   return sizeof(cv::GMat);
}

#else

void * VectorOfGMatCreate()
{
   throw_no_vector();
}

void * VectorOfGMatCreateSize(int size)
{
   throw_no_vector();
}

int VectorOfGMatGetSize(void* v)
{
   throw_no_vector();
}

void VectorOfGMatPush(void* v, void* value)
{
   throw_no_vector();
}

//CVAPI(void) VectorOfGMatPushMulti(std::vector< cv::GMat >* v, cv::GMat* values, int count);

void VectorOfGMatPushVector(void* v, void* other)
{
   throw_no_vector();
}

void VectorOfGMatClear(void* v)
{
   throw_no_vector();
}

void VectorOfGMatRelease(void** v)
{
   throw_no_vector();
}

void VectorOfGMatCopyData(void* v, void* data)
{
   throw_no_vector();
}

void* VectorOfGMatGetStartAddress(void* v)
{
   throw_no_vector();
}

void VectorOfGMatGetItemPtr(void* vec, int index,  void** element)
{
   throw_no_vector();
}

#if false
cv::_InputArray* cveInputArrayFromVectorOfGMat(void* vec)
{
   throw_no_vector();
}

cv::_OutputArray* cveOutputArrayFromVectorOfGMat(void* vec)
{
   throw_no_vector();
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfGMat(void* vec)
{
   throw_no_vector();
}
#endif

int VectorOfGMatSizeOfItemInBytes()
{
   throw_no_vector();
}


#endif
