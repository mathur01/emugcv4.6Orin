//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2022 by EMGU Corporation. All rights reserved.
//
//  Vector of VectorOfDMatch
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------



#include "vector_VectorOfDMatch.h"

#if 1



std::vector< std::vector< cv::DMatch > >* VectorOfVectorOfDMatchCreate() 
{
   return new std::vector< std::vector< cv::DMatch > >(); 
}

std::vector< std::vector< cv::DMatch > >* VectorOfVectorOfDMatchCreateSize(int size) 
{
   return new std::vector< std::vector< cv::DMatch > >(size); 
}

int VectorOfVectorOfDMatchGetSize(std::vector< std::vector< cv::DMatch > >* v)
{
   return v->size();
}


void VectorOfVectorOfDMatchPush(std::vector< std::vector< cv::DMatch > >* v, std::vector< cv::DMatch >* value)
{
   v->push_back(*value);
}

//void VectorOfVectorOfDMatchPushMulti(std::vector< std::vector< cv::DMatch > >* v,  std::vector< cv::DMatch >* values, int count)
//{
//   VectorPushMulti< std::vector< cv::DMatch > >(v, values, count);
//}

void VectorOfVectorOfDMatchPushVector(std::vector< std::vector< cv::DMatch > >* v, std::vector< std::vector< cv::DMatch > >* other)
{
   v->insert(v->end(), other->begin(), other->end());
}

void VectorOfVectorOfDMatchClear(std::vector< std::vector< cv::DMatch > >* v)
{
   v->clear();
}

void VectorOfVectorOfDMatchRelease(std::vector< std::vector< cv::DMatch > >** v)
{
   delete *v;
   *v = 0;
}

void VectorOfVectorOfDMatchCopyData(std::vector< std::vector< cv::DMatch > >* v, std::vector< cv::DMatch >* data)
{
   VectorCopyData< std::vector< cv::DMatch > >(v, data);
}

std::vector< cv::DMatch >* VectorOfVectorOfDMatchGetStartAddress(std::vector< std::vector< cv::DMatch > >* v)
{
   return v->empty() ? NULL : &(*v)[0];
}

int64_t VectorOfVectorOfDMatchGetMemorySize(std::vector< std::vector< cv::DMatch > >* v)
{
   if (v->empty()) return 0;
   return (int64_t) (v->size() * sizeof(std::vector< cv::DMatch >));
}

void VectorOfVectorOfDMatchGetItemPtr(std::vector<  std::vector< cv::DMatch > >* vec, int index,  std::vector< cv::DMatch >** element)
{
   *element = &vec->at(index);
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfVectorOfDMatch(std::vector< std::vector< cv::DMatch > >* vec)
{
   return new cv::_InputArray(*vec);
}

cv::_OutputArray* cveOutputArrayFromVectorOfVectorOfDMatch(std::vector< std::vector< cv::DMatch > >* vec)
{
   return new cv::_OutputArray(*vec);
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfVectorOfDMatch(std::vector< std::vector< cv::DMatch > >* vec)
{
   return new cv::_InputOutputArray(*vec);
}
#endif

int VectorOfVectorOfDMatchSizeOfItemInBytes()
{
   return sizeof(std::vector< cv::DMatch >);
}

#else

void * VectorOfVectorOfDMatchCreate()
{
   throw_no_vector();
}

void * VectorOfVectorOfDMatchCreateSize(int size)
{
   throw_no_vector();
}

int VectorOfVectorOfDMatchGetSize(void* v)
{
   throw_no_vector();
}

void VectorOfVectorOfDMatchPush(void* v, void* value)
{
   throw_no_vector();
}

//CVAPI(void) VectorOfVectorOfDMatchPushMulti(std::vector< std::vector< cv::DMatch > >* v, std::vector< cv::DMatch >* values, int count);

void VectorOfVectorOfDMatchPushVector(void* v, void* other)
{
   throw_no_vector();
}

void VectorOfVectorOfDMatchClear(void* v)
{
   throw_no_vector();
}

void VectorOfVectorOfDMatchRelease(void** v)
{
   throw_no_vector();
}

void VectorOfVectorOfDMatchCopyData(void* v, void* data)
{
   throw_no_vector();
}

void* VectorOfVectorOfDMatchGetStartAddress(void* v)
{
   throw_no_vector();
}

void VectorOfVectorOfDMatchGetItemPtr(void* vec, int index,  void** element)
{
   throw_no_vector();
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfVectorOfDMatch(void* vec)
{
   throw_no_vector();
}

cv::_OutputArray* cveOutputArrayFromVectorOfVectorOfDMatch(void* vec)
{
   throw_no_vector();
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfVectorOfDMatch(void* vec)
{
   throw_no_vector();
}
#endif

int VectorOfVectorOfDMatchSizeOfItemInBytes()
{
   throw_no_vector();
}


#endif
