//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2022 by EMGU Corporation. All rights reserved.
//
//  Vector of Point3D32F
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------



#include "vector_Point3D32F.h"

#if 1



std::vector< cv::Point3f >* VectorOfPoint3D32FCreate() 
{ 
   return new std::vector< cv::Point3f >(); 
}

std::vector< cv::Point3f >* VectorOfPoint3D32FCreateSize(int size) 
{ 
   return new std::vector< cv::Point3f >(size); 
}

int VectorOfPoint3D32FGetSize(std::vector< cv::Point3f >* v)
{
   return v->size();
}

void VectorOfPoint3D32FPush(std::vector< cv::Point3f >* v, cv::Point3f* value)
{
   v->push_back(*value);
}

void VectorOfPoint3D32FPushMulti(std::vector< cv::Point3f >* v,  cv::Point3f* values, int count)
{
   VectorPushMulti< cv::Point3f >(v, values, count);
}

void VectorOfPoint3D32FPushVector(std::vector< cv::Point3f >* v, std::vector< cv::Point3f >* other)
{  
   VectorOfPoint3D32FPushMulti(v,  &(*other)[0], other->size());
}

void VectorOfPoint3D32FClear(std::vector< cv::Point3f >* v)
{
   v->clear();
}

void VectorOfPoint3D32FRelease(std::vector< cv::Point3f >** v)
{
   delete *v;
   *v = 0;
}

void VectorOfPoint3D32FCopyData(std::vector< cv::Point3f >* v, cv::Point3f* data)
{
   VectorCopyData< cv::Point3f >(v, data);
}

cv::Point3f* VectorOfPoint3D32FGetStartAddress(std::vector< cv::Point3f >* v)
{
   return v->empty() ? NULL : &(*v)[0];
}

int64_t VectorOfPoint3D32FGetMemorySize(std::vector< cv::Point3f >* v)
{
   if (v->empty()) return 0;
   return (int64_t) (v->size() * sizeof(cv::Point3f));
}

void VectorOfPoint3D32FGetItem(std::vector<  cv::Point3f >* vec, int index,  cv::Point3f * element)
{
   *element = vec->at(index);
}

void VectorOfPoint3D32FGetItemPtr(std::vector<  cv::Point3f >* vec, int index,  cv::Point3f** element)
{ 
	*element = &vec->at(index);
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfPoint3D32F(std::vector< cv::Point3f >* vec)
{
   return new cv::_InputArray(*vec);
}

cv::_OutputArray* cveOutputArrayFromVectorOfPoint3D32F(std::vector< cv::Point3f >* vec)
{
   return new cv::_OutputArray(*vec);
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfPoint3D32F(std::vector< cv::Point3f >* vec)
{
   return new cv::_InputOutputArray(*vec);
}
#endif

int VectorOfPoint3D32FSizeOfItemInBytes()
{
   return sizeof(cv::Point3f);
}

#else

void* VectorOfPoint3D32FCreate()
{
  throw_no_vector();
}

void* VectorOfPoint3D32FCreateSize(int size)
{
  throw_no_vector();
}

int VectorOfPoint3D32FGetSize(void* v)
{
  throw_no_vector();
}

void VectorOfPoint3D32FPush(void* v, void* value)
{
  throw_no_vector();
}

void VectorOfPoint3D32FPushMulti(void* v, void* values, int count)
{
  throw_no_vector();
}

void VectorOfPoint3D32FPushVector(void* v, void* other)
{
  throw_no_vector();
}

void VectorOfPoint3D32FClear(void* v)
{
  throw_no_vector();
}

void VectorOfPoint3D32FRelease(void** v)
{
  throw_no_vector();
}

void VectorOfPoint3D32FCopyData(void* v,  void* data)
{
  throw_no_vector();
}

void* VectorOfPoint3D32FGetStartAddress(void* v)
{
  throw_no_vector();
}

void VectorOfPoint3D32FGetItem(void* vec, int index, void* element)
{
  throw_no_vector();
}

void VectorOfPoint3D32FGetItemPtr(void* vec, int index, void** element)
{
  throw_no_vector();
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfPoint3D32F(void* vec)
{
  throw_no_vector();
}

cv::_OutputArray* cveOutputArrayFromVectorOfPoint3D32F(void* vec)
{
  throw_no_vector();
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfPoint3D32F(void* vec)
{
  throw_no_vector();
}
#endif
 
int VectorOfPoint3D32FSizeOfItemInBytes()
{
  throw_no_vector();
}

#endif
