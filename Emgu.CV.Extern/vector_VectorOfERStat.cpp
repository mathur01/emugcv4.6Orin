//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2022 by EMGU Corporation. All rights reserved.
//
//  Vector of VectorOfERStat
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------



#include "vector_VectorOfERStat.h"

#if defined(HAVE_OPENCV_TEXT)



std::vector< std::vector< cv::text::ERStat > >* VectorOfVectorOfERStatCreate() 
{
   return new std::vector< std::vector< cv::text::ERStat > >(); 
}

std::vector< std::vector< cv::text::ERStat > >* VectorOfVectorOfERStatCreateSize(int size) 
{
   return new std::vector< std::vector< cv::text::ERStat > >(size); 
}

int VectorOfVectorOfERStatGetSize(std::vector< std::vector< cv::text::ERStat > >* v)
{
   return v->size();
}


void VectorOfVectorOfERStatPush(std::vector< std::vector< cv::text::ERStat > >* v, std::vector< cv::text::ERStat >* value)
{
   v->push_back(*value);
}

//void VectorOfVectorOfERStatPushMulti(std::vector< std::vector< cv::text::ERStat > >* v,  std::vector< cv::text::ERStat >* values, int count)
//{
//   VectorPushMulti< std::vector< cv::text::ERStat > >(v, values, count);
//}

void VectorOfVectorOfERStatPushVector(std::vector< std::vector< cv::text::ERStat > >* v, std::vector< std::vector< cv::text::ERStat > >* other)
{
   v->insert(v->end(), other->begin(), other->end());
}

void VectorOfVectorOfERStatClear(std::vector< std::vector< cv::text::ERStat > >* v)
{
   v->clear();
}

void VectorOfVectorOfERStatRelease(std::vector< std::vector< cv::text::ERStat > >** v)
{
   delete *v;
   *v = 0;
}

void VectorOfVectorOfERStatCopyData(std::vector< std::vector< cv::text::ERStat > >* v, std::vector< cv::text::ERStat >* data)
{
   VectorCopyData< std::vector< cv::text::ERStat > >(v, data);
}

std::vector< cv::text::ERStat >* VectorOfVectorOfERStatGetStartAddress(std::vector< std::vector< cv::text::ERStat > >* v)
{
   return v->empty() ? NULL : &(*v)[0];
}

int64_t VectorOfVectorOfERStatGetMemorySize(std::vector< std::vector< cv::text::ERStat > >* v)
{
   if (v->empty()) return 0;
   return (int64_t) (v->size() * sizeof(std::vector< cv::text::ERStat >));
}

void VectorOfVectorOfERStatGetItemPtr(std::vector<  std::vector< cv::text::ERStat > >* vec, int index,  std::vector< cv::text::ERStat >** element)
{
   *element = &vec->at(index);
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfVectorOfERStat(std::vector< std::vector< cv::text::ERStat > >* vec)
{
   return new cv::_InputArray(*vec);
}

cv::_OutputArray* cveOutputArrayFromVectorOfVectorOfERStat(std::vector< std::vector< cv::text::ERStat > >* vec)
{
   return new cv::_OutputArray(*vec);
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfVectorOfERStat(std::vector< std::vector< cv::text::ERStat > >* vec)
{
   return new cv::_InputOutputArray(*vec);
}
#endif

int VectorOfVectorOfERStatSizeOfItemInBytes()
{
   return sizeof(std::vector< cv::text::ERStat >);
}

#else

void * VectorOfVectorOfERStatCreate()
{
   throw_no_vector();
}

void * VectorOfVectorOfERStatCreateSize(int size)
{
   throw_no_vector();
}

int VectorOfVectorOfERStatGetSize(void* v)
{
   throw_no_vector();
}

void VectorOfVectorOfERStatPush(void* v, void* value)
{
   throw_no_vector();
}

//CVAPI(void) VectorOfVectorOfERStatPushMulti(std::vector< std::vector< cv::text::ERStat > >* v, std::vector< cv::text::ERStat >* values, int count);

void VectorOfVectorOfERStatPushVector(void* v, void* other)
{
   throw_no_vector();
}

void VectorOfVectorOfERStatClear(void* v)
{
   throw_no_vector();
}

void VectorOfVectorOfERStatRelease(void** v)
{
   throw_no_vector();
}

void VectorOfVectorOfERStatCopyData(void* v, void* data)
{
   throw_no_vector();
}

void* VectorOfVectorOfERStatGetStartAddress(void* v)
{
   throw_no_vector();
}

void VectorOfVectorOfERStatGetItemPtr(void* vec, int index,  void** element)
{
   throw_no_vector();
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfVectorOfERStat(void* vec)
{
   throw_no_vector();
}

cv::_OutputArray* cveOutputArrayFromVectorOfVectorOfERStat(void* vec)
{
   throw_no_vector();
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfVectorOfERStat(void* vec)
{
   throw_no_vector();
}
#endif

int VectorOfVectorOfERStatSizeOfItemInBytes()
{
   throw_no_vector();
}


#endif
