//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2022 by EMGU Corporation. All rights reserved.
//
//  Vector of Size
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------



#include "vector_Size.h"

#if 1



std::vector< cv::Size >* VectorOfSizeCreate() 
{ 
   return new std::vector< cv::Size >(); 
}

std::vector< cv::Size >* VectorOfSizeCreateSize(int size) 
{ 
   return new std::vector< cv::Size >(size); 
}

int VectorOfSizeGetSize(std::vector< cv::Size >* v)
{
   return v->size();
}

void VectorOfSizePush(std::vector< cv::Size >* v, cv::Size* value)
{
   v->push_back(*value);
}

void VectorOfSizePushMulti(std::vector< cv::Size >* v,  cv::Size* values, int count)
{
   VectorPushMulti< cv::Size >(v, values, count);
}

void VectorOfSizePushVector(std::vector< cv::Size >* v, std::vector< cv::Size >* other)
{  
   VectorOfSizePushMulti(v,  &(*other)[0], other->size());
}

void VectorOfSizeClear(std::vector< cv::Size >* v)
{
   v->clear();
}

void VectorOfSizeRelease(std::vector< cv::Size >** v)
{
   delete *v;
   *v = 0;
}

void VectorOfSizeCopyData(std::vector< cv::Size >* v, cv::Size* data)
{
   VectorCopyData< cv::Size >(v, data);
}

cv::Size* VectorOfSizeGetStartAddress(std::vector< cv::Size >* v)
{
   return v->empty() ? NULL : &(*v)[0];
}

int64_t VectorOfSizeGetMemorySize(std::vector< cv::Size >* v)
{
   if (v->empty()) return 0;
   return (int64_t) (v->size() * sizeof(cv::Size));
}

void VectorOfSizeGetItem(std::vector<  cv::Size >* vec, int index,  cv::Size * element)
{
   *element = vec->at(index);
}

void VectorOfSizeGetItemPtr(std::vector<  cv::Size >* vec, int index,  cv::Size** element)
{ 
	*element = &vec->at(index);
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfSize(std::vector< cv::Size >* vec)
{
   return new cv::_InputArray(*vec);
}

cv::_OutputArray* cveOutputArrayFromVectorOfSize(std::vector< cv::Size >* vec)
{
   return new cv::_OutputArray(*vec);
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfSize(std::vector< cv::Size >* vec)
{
   return new cv::_InputOutputArray(*vec);
}
#endif

int VectorOfSizeSizeOfItemInBytes()
{
   return sizeof(cv::Size);
}

#else

void* VectorOfSizeCreate()
{
  throw_no_vector();
}

void* VectorOfSizeCreateSize(int size)
{
  throw_no_vector();
}

int VectorOfSizeGetSize(void* v)
{
  throw_no_vector();
}

void VectorOfSizePush(void* v, void* value)
{
  throw_no_vector();
}

void VectorOfSizePushMulti(void* v, void* values, int count)
{
  throw_no_vector();
}

void VectorOfSizePushVector(void* v, void* other)
{
  throw_no_vector();
}

void VectorOfSizeClear(void* v)
{
  throw_no_vector();
}

void VectorOfSizeRelease(void** v)
{
  throw_no_vector();
}

void VectorOfSizeCopyData(void* v,  void* data)
{
  throw_no_vector();
}

void* VectorOfSizeGetStartAddress(void* v)
{
  throw_no_vector();
}

void VectorOfSizeGetItem(void* vec, int index, void* element)
{
  throw_no_vector();
}

void VectorOfSizeGetItemPtr(void* vec, int index, void** element)
{
  throw_no_vector();
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfSize(void* vec)
{
  throw_no_vector();
}

cv::_OutputArray* cveOutputArrayFromVectorOfSize(void* vec)
{
  throw_no_vector();
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfSize(void* vec)
{
  throw_no_vector();
}
#endif
 
int VectorOfSizeSizeOfItemInBytes()
{
  throw_no_vector();
}

#endif
