//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2022 by EMGU Corporation. All rights reserved.
//
//  Vector of Triangle2DF
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------



#include "vector_Triangle2DF.h"

#if 1



std::vector< cv::Vec6f >* VectorOfTriangle2DFCreate() 
{ 
   return new std::vector< cv::Vec6f >(); 
}

std::vector< cv::Vec6f >* VectorOfTriangle2DFCreateSize(int size) 
{ 
   return new std::vector< cv::Vec6f >(size); 
}

int VectorOfTriangle2DFGetSize(std::vector< cv::Vec6f >* v)
{
   return v->size();
}

void VectorOfTriangle2DFPush(std::vector< cv::Vec6f >* v, cv::Vec6f* value)
{
   v->push_back(*value);
}

void VectorOfTriangle2DFPushMulti(std::vector< cv::Vec6f >* v,  cv::Vec6f* values, int count)
{
   VectorPushMulti< cv::Vec6f >(v, values, count);
}

void VectorOfTriangle2DFPushVector(std::vector< cv::Vec6f >* v, std::vector< cv::Vec6f >* other)
{  
   VectorOfTriangle2DFPushMulti(v,  &(*other)[0], other->size());
}

void VectorOfTriangle2DFClear(std::vector< cv::Vec6f >* v)
{
   v->clear();
}

void VectorOfTriangle2DFRelease(std::vector< cv::Vec6f >** v)
{
   delete *v;
   *v = 0;
}

void VectorOfTriangle2DFCopyData(std::vector< cv::Vec6f >* v, cv::Vec6f* data)
{
   VectorCopyData< cv::Vec6f >(v, data);
}

cv::Vec6f* VectorOfTriangle2DFGetStartAddress(std::vector< cv::Vec6f >* v)
{
   return v->empty() ? NULL : &(*v)[0];
}

int64_t VectorOfTriangle2DFGetMemorySize(std::vector< cv::Vec6f >* v)
{
   if (v->empty()) return 0;
   return (int64_t) (v->size() * sizeof(cv::Vec6f));
}

void VectorOfTriangle2DFGetItem(std::vector<  cv::Vec6f >* vec, int index,  cv::Vec6f * element)
{
   *element = vec->at(index);
}

void VectorOfTriangle2DFGetItemPtr(std::vector<  cv::Vec6f >* vec, int index,  cv::Vec6f** element)
{ 
	*element = &vec->at(index);
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfTriangle2DF(std::vector< cv::Vec6f >* vec)
{
   return new cv::_InputArray(*vec);
}

cv::_OutputArray* cveOutputArrayFromVectorOfTriangle2DF(std::vector< cv::Vec6f >* vec)
{
   return new cv::_OutputArray(*vec);
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfTriangle2DF(std::vector< cv::Vec6f >* vec)
{
   return new cv::_InputOutputArray(*vec);
}
#endif

int VectorOfTriangle2DFSizeOfItemInBytes()
{
   return sizeof(cv::Vec6f);
}

#else

void* VectorOfTriangle2DFCreate()
{
  throw_no_vector();
}

void* VectorOfTriangle2DFCreateSize(int size)
{
  throw_no_vector();
}

int VectorOfTriangle2DFGetSize(void* v)
{
  throw_no_vector();
}

void VectorOfTriangle2DFPush(void* v, void* value)
{
  throw_no_vector();
}

void VectorOfTriangle2DFPushMulti(void* v, void* values, int count)
{
  throw_no_vector();
}

void VectorOfTriangle2DFPushVector(void* v, void* other)
{
  throw_no_vector();
}

void VectorOfTriangle2DFClear(void* v)
{
  throw_no_vector();
}

void VectorOfTriangle2DFRelease(void** v)
{
  throw_no_vector();
}

void VectorOfTriangle2DFCopyData(void* v,  void* data)
{
  throw_no_vector();
}

void* VectorOfTriangle2DFGetStartAddress(void* v)
{
  throw_no_vector();
}

void VectorOfTriangle2DFGetItem(void* vec, int index, void* element)
{
  throw_no_vector();
}

void VectorOfTriangle2DFGetItemPtr(void* vec, int index, void** element)
{
  throw_no_vector();
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfTriangle2DF(void* vec)
{
  throw_no_vector();
}

cv::_OutputArray* cveOutputArrayFromVectorOfTriangle2DF(void* vec)
{
  throw_no_vector();
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfTriangle2DF(void* vec)
{
  throw_no_vector();
}
#endif
 
int VectorOfTriangle2DFSizeOfItemInBytes()
{
  throw_no_vector();
}

#endif
