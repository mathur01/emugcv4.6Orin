//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2022 by EMGU Corporation. All rights reserved.
//
//  Vector of CvString
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------



#include "vector_CvString.h"

#if 1



std::vector< cv::String >* VectorOfCvStringCreate() 
{
   return new std::vector< cv::String >(); 
}

std::vector< cv::String >* VectorOfCvStringCreateSize(int size) 
{
   return new std::vector< cv::String >(size); 
}

int VectorOfCvStringGetSize(std::vector< cv::String >* v)
{
   return v->size();
}


void VectorOfCvStringPush(std::vector< cv::String >* v, cv::String* value)
{
   v->push_back(*value);
}

//void VectorOfCvStringPushMulti(std::vector< cv::String >* v,  cv::String* values, int count)
//{
//   VectorPushMulti< cv::String >(v, values, count);
//}

void VectorOfCvStringPushVector(std::vector< cv::String >* v, std::vector< cv::String >* other)
{
   v->insert(v->end(), other->begin(), other->end());
}

void VectorOfCvStringClear(std::vector< cv::String >* v)
{
   v->clear();
}

void VectorOfCvStringRelease(std::vector< cv::String >** v)
{
   delete *v;
   *v = 0;
}

void VectorOfCvStringCopyData(std::vector< cv::String >* v, cv::String* data)
{
   VectorCopyData< cv::String >(v, data);
}

cv::String* VectorOfCvStringGetStartAddress(std::vector< cv::String >* v)
{
   return v->empty() ? NULL : &(*v)[0];
}

int64_t VectorOfCvStringGetMemorySize(std::vector< cv::String >* v)
{
   if (v->empty()) return 0;
   return (int64_t) (v->size() * sizeof(cv::String));
}

void VectorOfCvStringGetItemPtr(std::vector<  cv::String >* vec, int index,  cv::String** element)
{
   *element = &vec->at(index);
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfCvString(std::vector< cv::String >* vec)
{
   return new cv::_InputArray(*vec);
}

cv::_OutputArray* cveOutputArrayFromVectorOfCvString(std::vector< cv::String >* vec)
{
   return new cv::_OutputArray(*vec);
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfCvString(std::vector< cv::String >* vec)
{
   return new cv::_InputOutputArray(*vec);
}
#endif

int VectorOfCvStringSizeOfItemInBytes()
{
   return sizeof(cv::String);
}

#else

void * VectorOfCvStringCreate()
{
   throw_no_vector();
}

void * VectorOfCvStringCreateSize(int size)
{
   throw_no_vector();
}

int VectorOfCvStringGetSize(void* v)
{
   throw_no_vector();
}

void VectorOfCvStringPush(void* v, void* value)
{
   throw_no_vector();
}

//CVAPI(void) VectorOfCvStringPushMulti(std::vector< cv::String >* v, cv::String* values, int count);

void VectorOfCvStringPushVector(void* v, void* other)
{
   throw_no_vector();
}

void VectorOfCvStringClear(void* v)
{
   throw_no_vector();
}

void VectorOfCvStringRelease(void** v)
{
   throw_no_vector();
}

void VectorOfCvStringCopyData(void* v, void* data)
{
   throw_no_vector();
}

void* VectorOfCvStringGetStartAddress(void* v)
{
   throw_no_vector();
}

void VectorOfCvStringGetItemPtr(void* vec, int index,  void** element)
{
   throw_no_vector();
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfCvString(void* vec)
{
   throw_no_vector();
}

cv::_OutputArray* cveOutputArrayFromVectorOfCvString(void* vec)
{
   throw_no_vector();
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfCvString(void* vec)
{
   throw_no_vector();
}
#endif

int VectorOfCvStringSizeOfItemInBytes()
{
   throw_no_vector();
}


#endif
