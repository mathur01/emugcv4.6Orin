//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2022 by EMGU Corporation. All rights reserved.
//
//  Vector of PointF
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------



#include "vector_PointF.h"

#if 1



std::vector< cv::Point2f >* VectorOfPointFCreate() 
{ 
   return new std::vector< cv::Point2f >(); 
}

std::vector< cv::Point2f >* VectorOfPointFCreateSize(int size) 
{ 
   return new std::vector< cv::Point2f >(size); 
}

int VectorOfPointFGetSize(std::vector< cv::Point2f >* v)
{
   return v->size();
}

void VectorOfPointFPush(std::vector< cv::Point2f >* v, cv::Point2f* value)
{
   v->push_back(*value);
}

void VectorOfPointFPushMulti(std::vector< cv::Point2f >* v,  cv::Point2f* values, int count)
{
   VectorPushMulti< cv::Point2f >(v, values, count);
}

void VectorOfPointFPushVector(std::vector< cv::Point2f >* v, std::vector< cv::Point2f >* other)
{  
   VectorOfPointFPushMulti(v,  &(*other)[0], other->size());
}

void VectorOfPointFClear(std::vector< cv::Point2f >* v)
{
   v->clear();
}

void VectorOfPointFRelease(std::vector< cv::Point2f >** v)
{
   delete *v;
   *v = 0;
}

void VectorOfPointFCopyData(std::vector< cv::Point2f >* v, cv::Point2f* data)
{
   VectorCopyData< cv::Point2f >(v, data);
}

cv::Point2f* VectorOfPointFGetStartAddress(std::vector< cv::Point2f >* v)
{
   return v->empty() ? NULL : &(*v)[0];
}

int64_t VectorOfPointFGetMemorySize(std::vector< cv::Point2f >* v)
{
   if (v->empty()) return 0;
   return (int64_t) (v->size() * sizeof(cv::Point2f));
}

void VectorOfPointFGetItem(std::vector<  cv::Point2f >* vec, int index,  cv::Point2f * element)
{
   *element = vec->at(index);
}

void VectorOfPointFGetItemPtr(std::vector<  cv::Point2f >* vec, int index,  cv::Point2f** element)
{ 
	*element = &vec->at(index);
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfPointF(std::vector< cv::Point2f >* vec)
{
   return new cv::_InputArray(*vec);
}

cv::_OutputArray* cveOutputArrayFromVectorOfPointF(std::vector< cv::Point2f >* vec)
{
   return new cv::_OutputArray(*vec);
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfPointF(std::vector< cv::Point2f >* vec)
{
   return new cv::_InputOutputArray(*vec);
}
#endif

int VectorOfPointFSizeOfItemInBytes()
{
   return sizeof(cv::Point2f);
}

#else

void* VectorOfPointFCreate()
{
  throw_no_vector();
}

void* VectorOfPointFCreateSize(int size)
{
  throw_no_vector();
}

int VectorOfPointFGetSize(void* v)
{
  throw_no_vector();
}

void VectorOfPointFPush(void* v, void* value)
{
  throw_no_vector();
}

void VectorOfPointFPushMulti(void* v, void* values, int count)
{
  throw_no_vector();
}

void VectorOfPointFPushVector(void* v, void* other)
{
  throw_no_vector();
}

void VectorOfPointFClear(void* v)
{
  throw_no_vector();
}

void VectorOfPointFRelease(void** v)
{
  throw_no_vector();
}

void VectorOfPointFCopyData(void* v,  void* data)
{
  throw_no_vector();
}

void* VectorOfPointFGetStartAddress(void* v)
{
  throw_no_vector();
}

void VectorOfPointFGetItem(void* vec, int index, void* element)
{
  throw_no_vector();
}

void VectorOfPointFGetItemPtr(void* vec, int index, void** element)
{
  throw_no_vector();
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfPointF(void* vec)
{
  throw_no_vector();
}

cv::_OutputArray* cveOutputArrayFromVectorOfPointF(void* vec)
{
  throw_no_vector();
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfPointF(void* vec)
{
  throw_no_vector();
}
#endif
 
int VectorOfPointFSizeOfItemInBytes()
{
  throw_no_vector();
}

#endif
