//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2022 by EMGU Corporation. All rights reserved.
//
//  Vector of Double
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------



#include "vector_Double.h"

#if 1



std::vector< double >* VectorOfDoubleCreate() 
{ 
   return new std::vector< double >(); 
}

std::vector< double >* VectorOfDoubleCreateSize(int size) 
{ 
   return new std::vector< double >(size); 
}

int VectorOfDoubleGetSize(std::vector< double >* v)
{
   return v->size();
}

void VectorOfDoublePush(std::vector< double >* v, double* value)
{
   v->push_back(*value);
}

void VectorOfDoublePushMulti(std::vector< double >* v,  double* values, int count)
{
   VectorPushMulti< double >(v, values, count);
}

void VectorOfDoublePushVector(std::vector< double >* v, std::vector< double >* other)
{  
   VectorOfDoublePushMulti(v,  &(*other)[0], other->size());
}

void VectorOfDoubleClear(std::vector< double >* v)
{
   v->clear();
}

void VectorOfDoubleRelease(std::vector< double >** v)
{
   delete *v;
   *v = 0;
}

void VectorOfDoubleCopyData(std::vector< double >* v, double* data)
{
   VectorCopyData< double >(v, data);
}

double* VectorOfDoubleGetStartAddress(std::vector< double >* v)
{
   return v->empty() ? NULL : &(*v)[0];
}

int64_t VectorOfDoubleGetMemorySize(std::vector< double >* v)
{
   if (v->empty()) return 0;
   return (int64_t) (v->size() * sizeof(double));
}

void VectorOfDoubleGetItem(std::vector<  double >* vec, int index,  double * element)
{
   *element = vec->at(index);
}

void VectorOfDoubleGetItemPtr(std::vector<  double >* vec, int index,  double** element)
{ 
	*element = &vec->at(index);
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfDouble(std::vector< double >* vec)
{
   return new cv::_InputArray(*vec);
}

cv::_OutputArray* cveOutputArrayFromVectorOfDouble(std::vector< double >* vec)
{
   return new cv::_OutputArray(*vec);
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfDouble(std::vector< double >* vec)
{
   return new cv::_InputOutputArray(*vec);
}
#endif

int VectorOfDoubleSizeOfItemInBytes()
{
   return sizeof(double);
}

#else

void* VectorOfDoubleCreate()
{
  throw_no_vector();
}

void* VectorOfDoubleCreateSize(int size)
{
  throw_no_vector();
}

int VectorOfDoubleGetSize(void* v)
{
  throw_no_vector();
}

void VectorOfDoublePush(void* v, void* value)
{
  throw_no_vector();
}

void VectorOfDoublePushMulti(void* v, void* values, int count)
{
  throw_no_vector();
}

void VectorOfDoublePushVector(void* v, void* other)
{
  throw_no_vector();
}

void VectorOfDoubleClear(void* v)
{
  throw_no_vector();
}

void VectorOfDoubleRelease(void** v)
{
  throw_no_vector();
}

void VectorOfDoubleCopyData(void* v,  void* data)
{
  throw_no_vector();
}

void* VectorOfDoubleGetStartAddress(void* v)
{
  throw_no_vector();
}

void VectorOfDoubleGetItem(void* vec, int index, void* element)
{
  throw_no_vector();
}

void VectorOfDoubleGetItemPtr(void* vec, int index, void** element)
{
  throw_no_vector();
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfDouble(void* vec)
{
  throw_no_vector();
}

cv::_OutputArray* cveOutputArrayFromVectorOfDouble(void* vec)
{
  throw_no_vector();
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfDouble(void* vec)
{
  throw_no_vector();
}
#endif
 
int VectorOfDoubleSizeOfItemInBytes()
{
  throw_no_vector();
}

#endif
