//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2022 by EMGU Corporation. All rights reserved.
//
//  Vector of KeyPoint
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------



#include "vector_KeyPoint.h"

#if 1



std::vector< cv::KeyPoint >* VectorOfKeyPointCreate() 
{ 
   return new std::vector< cv::KeyPoint >(); 
}

std::vector< cv::KeyPoint >* VectorOfKeyPointCreateSize(int size) 
{ 
   return new std::vector< cv::KeyPoint >(size); 
}

int VectorOfKeyPointGetSize(std::vector< cv::KeyPoint >* v)
{
   return v->size();
}

void VectorOfKeyPointPush(std::vector< cv::KeyPoint >* v, cv::KeyPoint* value)
{
   v->push_back(*value);
}

void VectorOfKeyPointPushMulti(std::vector< cv::KeyPoint >* v,  cv::KeyPoint* values, int count)
{
   VectorPushMulti< cv::KeyPoint >(v, values, count);
}

void VectorOfKeyPointPushVector(std::vector< cv::KeyPoint >* v, std::vector< cv::KeyPoint >* other)
{  
   VectorOfKeyPointPushMulti(v,  &(*other)[0], other->size());
}

void VectorOfKeyPointClear(std::vector< cv::KeyPoint >* v)
{
   v->clear();
}

void VectorOfKeyPointRelease(std::vector< cv::KeyPoint >** v)
{
   delete *v;
   *v = 0;
}

void VectorOfKeyPointCopyData(std::vector< cv::KeyPoint >* v, cv::KeyPoint* data)
{
   VectorCopyData< cv::KeyPoint >(v, data);
}

cv::KeyPoint* VectorOfKeyPointGetStartAddress(std::vector< cv::KeyPoint >* v)
{
   return v->empty() ? NULL : &(*v)[0];
}

int64_t VectorOfKeyPointGetMemorySize(std::vector< cv::KeyPoint >* v)
{
   if (v->empty()) return 0;
   return (int64_t) (v->size() * sizeof(cv::KeyPoint));
}

void VectorOfKeyPointGetItem(std::vector<  cv::KeyPoint >* vec, int index,  cv::KeyPoint * element)
{
   *element = vec->at(index);
}

void VectorOfKeyPointGetItemPtr(std::vector<  cv::KeyPoint >* vec, int index,  cv::KeyPoint** element)
{ 
	*element = &vec->at(index);
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfKeyPoint(std::vector< cv::KeyPoint >* vec)
{
   return new cv::_InputArray(*vec);
}

cv::_OutputArray* cveOutputArrayFromVectorOfKeyPoint(std::vector< cv::KeyPoint >* vec)
{
   return new cv::_OutputArray(*vec);
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfKeyPoint(std::vector< cv::KeyPoint >* vec)
{
   return new cv::_InputOutputArray(*vec);
}
#endif

int VectorOfKeyPointSizeOfItemInBytes()
{
   return sizeof(cv::KeyPoint);
}

#else

void* VectorOfKeyPointCreate()
{
  throw_no_vector();
}

void* VectorOfKeyPointCreateSize(int size)
{
  throw_no_vector();
}

int VectorOfKeyPointGetSize(void* v)
{
  throw_no_vector();
}

void VectorOfKeyPointPush(void* v, void* value)
{
  throw_no_vector();
}

void VectorOfKeyPointPushMulti(void* v, void* values, int count)
{
  throw_no_vector();
}

void VectorOfKeyPointPushVector(void* v, void* other)
{
  throw_no_vector();
}

void VectorOfKeyPointClear(void* v)
{
  throw_no_vector();
}

void VectorOfKeyPointRelease(void** v)
{
  throw_no_vector();
}

void VectorOfKeyPointCopyData(void* v,  void* data)
{
  throw_no_vector();
}

void* VectorOfKeyPointGetStartAddress(void* v)
{
  throw_no_vector();
}

void VectorOfKeyPointGetItem(void* vec, int index, void* element)
{
  throw_no_vector();
}

void VectorOfKeyPointGetItemPtr(void* vec, int index, void** element)
{
  throw_no_vector();
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfKeyPoint(void* vec)
{
  throw_no_vector();
}

cv::_OutputArray* cveOutputArrayFromVectorOfKeyPoint(void* vec)
{
  throw_no_vector();
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfKeyPoint(void* vec)
{
  throw_no_vector();
}
#endif
 
int VectorOfKeyPointSizeOfItemInBytes()
{
  throw_no_vector();
}

#endif
