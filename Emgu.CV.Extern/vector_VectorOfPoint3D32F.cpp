//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2022 by EMGU Corporation. All rights reserved.
//
//  Vector of VectorOfPoint3D32F
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------



#include "vector_VectorOfPoint3D32F.h"

#if 1



std::vector< std::vector< cv::Point3f > >* VectorOfVectorOfPoint3D32FCreate() 
{
   return new std::vector< std::vector< cv::Point3f > >(); 
}

std::vector< std::vector< cv::Point3f > >* VectorOfVectorOfPoint3D32FCreateSize(int size) 
{
   return new std::vector< std::vector< cv::Point3f > >(size); 
}

int VectorOfVectorOfPoint3D32FGetSize(std::vector< std::vector< cv::Point3f > >* v)
{
   return v->size();
}


void VectorOfVectorOfPoint3D32FPush(std::vector< std::vector< cv::Point3f > >* v, std::vector< cv::Point3f >* value)
{
   v->push_back(*value);
}

//void VectorOfVectorOfPoint3D32FPushMulti(std::vector< std::vector< cv::Point3f > >* v,  std::vector< cv::Point3f >* values, int count)
//{
//   VectorPushMulti< std::vector< cv::Point3f > >(v, values, count);
//}

void VectorOfVectorOfPoint3D32FPushVector(std::vector< std::vector< cv::Point3f > >* v, std::vector< std::vector< cv::Point3f > >* other)
{
   v->insert(v->end(), other->begin(), other->end());
}

void VectorOfVectorOfPoint3D32FClear(std::vector< std::vector< cv::Point3f > >* v)
{
   v->clear();
}

void VectorOfVectorOfPoint3D32FRelease(std::vector< std::vector< cv::Point3f > >** v)
{
   delete *v;
   *v = 0;
}

void VectorOfVectorOfPoint3D32FCopyData(std::vector< std::vector< cv::Point3f > >* v, std::vector< cv::Point3f >* data)
{
   VectorCopyData< std::vector< cv::Point3f > >(v, data);
}

std::vector< cv::Point3f >* VectorOfVectorOfPoint3D32FGetStartAddress(std::vector< std::vector< cv::Point3f > >* v)
{
   return v->empty() ? NULL : &(*v)[0];
}

int64_t VectorOfVectorOfPoint3D32FGetMemorySize(std::vector< std::vector< cv::Point3f > >* v)
{
   if (v->empty()) return 0;
   return (int64_t) (v->size() * sizeof(std::vector< cv::Point3f >));
}

void VectorOfVectorOfPoint3D32FGetItemPtr(std::vector<  std::vector< cv::Point3f > >* vec, int index,  std::vector< cv::Point3f >** element)
{
   *element = &vec->at(index);
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfVectorOfPoint3D32F(std::vector< std::vector< cv::Point3f > >* vec)
{
   return new cv::_InputArray(*vec);
}

cv::_OutputArray* cveOutputArrayFromVectorOfVectorOfPoint3D32F(std::vector< std::vector< cv::Point3f > >* vec)
{
   return new cv::_OutputArray(*vec);
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfVectorOfPoint3D32F(std::vector< std::vector< cv::Point3f > >* vec)
{
   return new cv::_InputOutputArray(*vec);
}
#endif

int VectorOfVectorOfPoint3D32FSizeOfItemInBytes()
{
   return sizeof(std::vector< cv::Point3f >);
}

#else

void * VectorOfVectorOfPoint3D32FCreate()
{
   throw_no_vector();
}

void * VectorOfVectorOfPoint3D32FCreateSize(int size)
{
   throw_no_vector();
}

int VectorOfVectorOfPoint3D32FGetSize(void* v)
{
   throw_no_vector();
}

void VectorOfVectorOfPoint3D32FPush(void* v, void* value)
{
   throw_no_vector();
}

//CVAPI(void) VectorOfVectorOfPoint3D32FPushMulti(std::vector< std::vector< cv::Point3f > >* v, std::vector< cv::Point3f >* values, int count);

void VectorOfVectorOfPoint3D32FPushVector(void* v, void* other)
{
   throw_no_vector();
}

void VectorOfVectorOfPoint3D32FClear(void* v)
{
   throw_no_vector();
}

void VectorOfVectorOfPoint3D32FRelease(void** v)
{
   throw_no_vector();
}

void VectorOfVectorOfPoint3D32FCopyData(void* v, void* data)
{
   throw_no_vector();
}

void* VectorOfVectorOfPoint3D32FGetStartAddress(void* v)
{
   throw_no_vector();
}

void VectorOfVectorOfPoint3D32FGetItemPtr(void* vec, int index,  void** element)
{
   throw_no_vector();
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfVectorOfPoint3D32F(void* vec)
{
   throw_no_vector();
}

cv::_OutputArray* cveOutputArrayFromVectorOfVectorOfPoint3D32F(void* vec)
{
   throw_no_vector();
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfVectorOfPoint3D32F(void* vec)
{
   throw_no_vector();
}
#endif

int VectorOfVectorOfPoint3D32FSizeOfItemInBytes()
{
   throw_no_vector();
}


#endif
