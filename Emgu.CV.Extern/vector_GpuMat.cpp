//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2022 by EMGU Corporation. All rights reserved.
//
//  Vector of GpuMat
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------



#include "vector_GpuMat.h"

#if 1



std::vector< cv::cuda::GpuMat >* VectorOfGpuMatCreate() 
{
   return new std::vector< cv::cuda::GpuMat >(); 
}

std::vector< cv::cuda::GpuMat >* VectorOfGpuMatCreateSize(int size) 
{
   return new std::vector< cv::cuda::GpuMat >(size); 
}

int VectorOfGpuMatGetSize(std::vector< cv::cuda::GpuMat >* v)
{
   return v->size();
}


void VectorOfGpuMatPush(std::vector< cv::cuda::GpuMat >* v, cv::cuda::GpuMat* value)
{
   v->push_back(*value);
}

//void VectorOfGpuMatPushMulti(std::vector< cv::cuda::GpuMat >* v,  cv::cuda::GpuMat* values, int count)
//{
//   VectorPushMulti< cv::cuda::GpuMat >(v, values, count);
//}

void VectorOfGpuMatPushVector(std::vector< cv::cuda::GpuMat >* v, std::vector< cv::cuda::GpuMat >* other)
{
   v->insert(v->end(), other->begin(), other->end());
}

void VectorOfGpuMatClear(std::vector< cv::cuda::GpuMat >* v)
{
   v->clear();
}

void VectorOfGpuMatRelease(std::vector< cv::cuda::GpuMat >** v)
{
   delete *v;
   *v = 0;
}

void VectorOfGpuMatCopyData(std::vector< cv::cuda::GpuMat >* v, cv::cuda::GpuMat* data)
{
   VectorCopyData< cv::cuda::GpuMat >(v, data);
}

cv::cuda::GpuMat* VectorOfGpuMatGetStartAddress(std::vector< cv::cuda::GpuMat >* v)
{
   return v->empty() ? NULL : &(*v)[0];
}

int64_t VectorOfGpuMatGetMemorySize(std::vector< cv::cuda::GpuMat >* v)
{
   if (v->empty()) return 0;
   return (int64_t) (v->size() * sizeof(cv::cuda::GpuMat));
}

void VectorOfGpuMatGetItemPtr(std::vector<  cv::cuda::GpuMat >* vec, int index,  cv::cuda::GpuMat** element)
{
   *element = &vec->at(index);
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfGpuMat(std::vector< cv::cuda::GpuMat >* vec)
{
   return new cv::_InputArray(*vec);
}

cv::_OutputArray* cveOutputArrayFromVectorOfGpuMat(std::vector< cv::cuda::GpuMat >* vec)
{
   return new cv::_OutputArray(*vec);
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfGpuMat(std::vector< cv::cuda::GpuMat >* vec)
{
   return new cv::_InputOutputArray(*vec);
}
#endif

int VectorOfGpuMatSizeOfItemInBytes()
{
   return sizeof(cv::cuda::GpuMat);
}

#else

void * VectorOfGpuMatCreate()
{
   throw_no_vector();
}

void * VectorOfGpuMatCreateSize(int size)
{
   throw_no_vector();
}

int VectorOfGpuMatGetSize(void* v)
{
   throw_no_vector();
}

void VectorOfGpuMatPush(void* v, void* value)
{
   throw_no_vector();
}

//CVAPI(void) VectorOfGpuMatPushMulti(std::vector< cv::cuda::GpuMat >* v, cv::cuda::GpuMat* values, int count);

void VectorOfGpuMatPushVector(void* v, void* other)
{
   throw_no_vector();
}

void VectorOfGpuMatClear(void* v)
{
   throw_no_vector();
}

void VectorOfGpuMatRelease(void** v)
{
   throw_no_vector();
}

void VectorOfGpuMatCopyData(void* v, void* data)
{
   throw_no_vector();
}

void* VectorOfGpuMatGetStartAddress(void* v)
{
   throw_no_vector();
}

void VectorOfGpuMatGetItemPtr(void* vec, int index,  void** element)
{
   throw_no_vector();
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfGpuMat(void* vec)
{
   throw_no_vector();
}

cv::_OutputArray* cveOutputArrayFromVectorOfGpuMat(void* vec)
{
   throw_no_vector();
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfGpuMat(void* vec)
{
   throw_no_vector();
}
#endif

int VectorOfGpuMatSizeOfItemInBytes()
{
   throw_no_vector();
}


#endif
