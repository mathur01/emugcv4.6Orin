//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2022 by EMGU Corporation. All rights reserved.
//
//  Vector of ERStat
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------



#include "vector_ERStat.h"

#if defined(HAVE_OPENCV_TEXT)



std::vector< cv::text::ERStat >* VectorOfERStatCreate() 
{ 
   return new std::vector< cv::text::ERStat >(); 
}

std::vector< cv::text::ERStat >* VectorOfERStatCreateSize(int size) 
{ 
   return new std::vector< cv::text::ERStat >(size); 
}

int VectorOfERStatGetSize(std::vector< cv::text::ERStat >* v)
{
   return v->size();
}

void VectorOfERStatPush(std::vector< cv::text::ERStat >* v, cv::text::ERStat* value)
{
   v->push_back(*value);
}

void VectorOfERStatPushMulti(std::vector< cv::text::ERStat >* v,  cv::text::ERStat* values, int count)
{
   VectorPushMulti< cv::text::ERStat >(v, values, count);
}

void VectorOfERStatPushVector(std::vector< cv::text::ERStat >* v, std::vector< cv::text::ERStat >* other)
{  
   VectorOfERStatPushMulti(v,  &(*other)[0], other->size());
}

void VectorOfERStatClear(std::vector< cv::text::ERStat >* v)
{
   v->clear();
}

void VectorOfERStatRelease(std::vector< cv::text::ERStat >** v)
{
   delete *v;
   *v = 0;
}

void VectorOfERStatCopyData(std::vector< cv::text::ERStat >* v, cv::text::ERStat* data)
{
   VectorCopyData< cv::text::ERStat >(v, data);
}

cv::text::ERStat* VectorOfERStatGetStartAddress(std::vector< cv::text::ERStat >* v)
{
   return v->empty() ? NULL : &(*v)[0];
}

int64_t VectorOfERStatGetMemorySize(std::vector< cv::text::ERStat >* v)
{
   if (v->empty()) return 0;
   return (int64_t) (v->size() * sizeof(cv::text::ERStat));
}

void VectorOfERStatGetItem(std::vector<  cv::text::ERStat >* vec, int index,  cv::text::ERStat * element)
{
   *element = vec->at(index);
}

void VectorOfERStatGetItemPtr(std::vector<  cv::text::ERStat >* vec, int index,  cv::text::ERStat** element)
{ 
	*element = &vec->at(index);
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfERStat(std::vector< cv::text::ERStat >* vec)
{
   return new cv::_InputArray(*vec);
}

cv::_OutputArray* cveOutputArrayFromVectorOfERStat(std::vector< cv::text::ERStat >* vec)
{
   return new cv::_OutputArray(*vec);
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfERStat(std::vector< cv::text::ERStat >* vec)
{
   return new cv::_InputOutputArray(*vec);
}
#endif

int VectorOfERStatSizeOfItemInBytes()
{
   return sizeof(cv::text::ERStat);
}

#else

void* VectorOfERStatCreate()
{
  throw_no_vector();
}

void* VectorOfERStatCreateSize(int size)
{
  throw_no_vector();
}

int VectorOfERStatGetSize(void* v)
{
  throw_no_vector();
}

void VectorOfERStatPush(void* v, void* value)
{
  throw_no_vector();
}

void VectorOfERStatPushMulti(void* v, void* values, int count)
{
  throw_no_vector();
}

void VectorOfERStatPushVector(void* v, void* other)
{
  throw_no_vector();
}

void VectorOfERStatClear(void* v)
{
  throw_no_vector();
}

void VectorOfERStatRelease(void** v)
{
  throw_no_vector();
}

void VectorOfERStatCopyData(void* v,  void* data)
{
  throw_no_vector();
}

void* VectorOfERStatGetStartAddress(void* v)
{
  throw_no_vector();
}

void VectorOfERStatGetItem(void* vec, int index, void* element)
{
  throw_no_vector();
}

void VectorOfERStatGetItemPtr(void* vec, int index, void** element)
{
  throw_no_vector();
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfERStat(void* vec)
{
  throw_no_vector();
}

cv::_OutputArray* cveOutputArrayFromVectorOfERStat(void* vec)
{
  throw_no_vector();
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfERStat(void* vec)
{
  throw_no_vector();
}
#endif
 
int VectorOfERStatSizeOfItemInBytes()
{
  throw_no_vector();
}

#endif
