//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2022 by EMGU Corporation. All rights reserved.
//
//  Vector of VectorOfMat
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------



#include "vector_VectorOfMat.h"

#if 1



std::vector< std::vector< cv::Mat > >* VectorOfVectorOfMatCreate() 
{
   return new std::vector< std::vector< cv::Mat > >(); 
}

std::vector< std::vector< cv::Mat > >* VectorOfVectorOfMatCreateSize(int size) 
{
   return new std::vector< std::vector< cv::Mat > >(size); 
}

int VectorOfVectorOfMatGetSize(std::vector< std::vector< cv::Mat > >* v)
{
   return v->size();
}


void VectorOfVectorOfMatPush(std::vector< std::vector< cv::Mat > >* v, std::vector< cv::Mat >* value)
{
   v->push_back(*value);
}

//void VectorOfVectorOfMatPushMulti(std::vector< std::vector< cv::Mat > >* v,  std::vector< cv::Mat >* values, int count)
//{
//   VectorPushMulti< std::vector< cv::Mat > >(v, values, count);
//}

void VectorOfVectorOfMatPushVector(std::vector< std::vector< cv::Mat > >* v, std::vector< std::vector< cv::Mat > >* other)
{
   v->insert(v->end(), other->begin(), other->end());
}

void VectorOfVectorOfMatClear(std::vector< std::vector< cv::Mat > >* v)
{
   v->clear();
}

void VectorOfVectorOfMatRelease(std::vector< std::vector< cv::Mat > >** v)
{
   delete *v;
   *v = 0;
}

void VectorOfVectorOfMatCopyData(std::vector< std::vector< cv::Mat > >* v, std::vector< cv::Mat >* data)
{
   VectorCopyData< std::vector< cv::Mat > >(v, data);
}

std::vector< cv::Mat >* VectorOfVectorOfMatGetStartAddress(std::vector< std::vector< cv::Mat > >* v)
{
   return v->empty() ? NULL : &(*v)[0];
}

int64_t VectorOfVectorOfMatGetMemorySize(std::vector< std::vector< cv::Mat > >* v)
{
   if (v->empty()) return 0;
   return (int64_t) (v->size() * sizeof(std::vector< cv::Mat >));
}

void VectorOfVectorOfMatGetItemPtr(std::vector<  std::vector< cv::Mat > >* vec, int index,  std::vector< cv::Mat >** element)
{
   *element = &vec->at(index);
}

#if false
cv::_InputArray* cveInputArrayFromVectorOfVectorOfMat(std::vector< std::vector< cv::Mat > >* vec)
{
   return new cv::_InputArray(*vec);
}

cv::_OutputArray* cveOutputArrayFromVectorOfVectorOfMat(std::vector< std::vector< cv::Mat > >* vec)
{
   return new cv::_OutputArray(*vec);
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfVectorOfMat(std::vector< std::vector< cv::Mat > >* vec)
{
   return new cv::_InputOutputArray(*vec);
}
#endif

int VectorOfVectorOfMatSizeOfItemInBytes()
{
   return sizeof(std::vector< cv::Mat >);
}

#else

void * VectorOfVectorOfMatCreate()
{
   throw_no_vector();
}

void * VectorOfVectorOfMatCreateSize(int size)
{
   throw_no_vector();
}

int VectorOfVectorOfMatGetSize(void* v)
{
   throw_no_vector();
}

void VectorOfVectorOfMatPush(void* v, void* value)
{
   throw_no_vector();
}

//CVAPI(void) VectorOfVectorOfMatPushMulti(std::vector< std::vector< cv::Mat > >* v, std::vector< cv::Mat >* values, int count);

void VectorOfVectorOfMatPushVector(void* v, void* other)
{
   throw_no_vector();
}

void VectorOfVectorOfMatClear(void* v)
{
   throw_no_vector();
}

void VectorOfVectorOfMatRelease(void** v)
{
   throw_no_vector();
}

void VectorOfVectorOfMatCopyData(void* v, void* data)
{
   throw_no_vector();
}

void* VectorOfVectorOfMatGetStartAddress(void* v)
{
   throw_no_vector();
}

void VectorOfVectorOfMatGetItemPtr(void* vec, int index,  void** element)
{
   throw_no_vector();
}

#if false
cv::_InputArray* cveInputArrayFromVectorOfVectorOfMat(void* vec)
{
   throw_no_vector();
}

cv::_OutputArray* cveOutputArrayFromVectorOfVectorOfMat(void* vec)
{
   throw_no_vector();
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfVectorOfMat(void* vec)
{
   throw_no_vector();
}
#endif

int VectorOfVectorOfMatSizeOfItemInBytes()
{
   throw_no_vector();
}


#endif
