//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2022 by EMGU Corporation. All rights reserved.
//
//  Vector of Pose3D
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------



#include "vector_Pose3D.h"

#if defined(HAVE_OPENCV_SURFACE_MATCHING)



std::vector< std::vector< cv::ppf_match_3d::Pose3D > >* VectorOfPose3DCreate() 
{
   return new std::vector< std::vector< cv::ppf_match_3d::Pose3D > >(); 
}

std::vector< std::vector< cv::ppf_match_3d::Pose3D > >* VectorOfPose3DCreateSize(int size) 
{
   return new std::vector< std::vector< cv::ppf_match_3d::Pose3D > >(size); 
}

int VectorOfPose3DGetSize(std::vector< std::vector< cv::ppf_match_3d::Pose3D > >* v)
{
   return v->size();
}


void VectorOfPose3DPush(std::vector< std::vector< cv::ppf_match_3d::Pose3D > >* v, std::vector< cv::ppf_match_3d::Pose3D >* value)
{
   v->push_back(*value);
}

//void VectorOfPose3DPushMulti(std::vector< std::vector< cv::ppf_match_3d::Pose3D > >* v,  std::vector< cv::ppf_match_3d::Pose3D >* values, int count)
//{
//   VectorPushMulti< std::vector< cv::ppf_match_3d::Pose3D > >(v, values, count);
//}

void VectorOfPose3DPushVector(std::vector< std::vector< cv::ppf_match_3d::Pose3D > >* v, std::vector< std::vector< cv::ppf_match_3d::Pose3D > >* other)
{
   v->insert(v->end(), other->begin(), other->end());
}

void VectorOfPose3DClear(std::vector< std::vector< cv::ppf_match_3d::Pose3D > >* v)
{
   v->clear();
}

void VectorOfPose3DRelease(std::vector< std::vector< cv::ppf_match_3d::Pose3D > >** v)
{
   delete *v;
   *v = 0;
}

void VectorOfPose3DCopyData(std::vector< std::vector< cv::ppf_match_3d::Pose3D > >* v, std::vector< cv::ppf_match_3d::Pose3D >* data)
{
   VectorCopyData< std::vector< cv::ppf_match_3d::Pose3D > >(v, data);
}

std::vector< cv::ppf_match_3d::Pose3D >* VectorOfPose3DGetStartAddress(std::vector< std::vector< cv::ppf_match_3d::Pose3D > >* v)
{
   return v->empty() ? NULL : &(*v)[0];
}

int64_t VectorOfPose3DGetMemorySize(std::vector< std::vector< cv::ppf_match_3d::Pose3D > >* v)
{
   if (v->empty()) return 0;
   return (int64_t) (v->size() * sizeof(std::vector< cv::ppf_match_3d::Pose3D >));
}

void VectorOfPose3DGetItemPtr(std::vector<  std::vector< cv::ppf_match_3d::Pose3D > >* vec, int index,  std::vector< cv::ppf_match_3d::Pose3D >** element)
{
   *element = &vec->at(index);
}

#if false
cv::_InputArray* cveInputArrayFromVectorOfPose3D(std::vector< std::vector< cv::ppf_match_3d::Pose3D > >* vec)
{
   return new cv::_InputArray(*vec);
}

cv::_OutputArray* cveOutputArrayFromVectorOfPose3D(std::vector< std::vector< cv::ppf_match_3d::Pose3D > >* vec)
{
   return new cv::_OutputArray(*vec);
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfPose3D(std::vector< std::vector< cv::ppf_match_3d::Pose3D > >* vec)
{
   return new cv::_InputOutputArray(*vec);
}
#endif

int VectorOfPose3DSizeOfItemInBytes()
{
   return sizeof(std::vector< cv::ppf_match_3d::Pose3D >);
}

#else

void * VectorOfPose3DCreate()
{
   throw_no_vector();
}

void * VectorOfPose3DCreateSize(int size)
{
   throw_no_vector();
}

int VectorOfPose3DGetSize(void* v)
{
   throw_no_vector();
}

void VectorOfPose3DPush(void* v, void* value)
{
   throw_no_vector();
}

//CVAPI(void) VectorOfPose3DPushMulti(std::vector< std::vector< cv::ppf_match_3d::Pose3D > >* v, std::vector< cv::ppf_match_3d::Pose3D >* values, int count);

void VectorOfPose3DPushVector(void* v, void* other)
{
   throw_no_vector();
}

void VectorOfPose3DClear(void* v)
{
   throw_no_vector();
}

void VectorOfPose3DRelease(void** v)
{
   throw_no_vector();
}

void VectorOfPose3DCopyData(void* v, void* data)
{
   throw_no_vector();
}

void* VectorOfPose3DGetStartAddress(void* v)
{
   throw_no_vector();
}

void VectorOfPose3DGetItemPtr(void* vec, int index,  void** element)
{
   throw_no_vector();
}

#if false
cv::_InputArray* cveInputArrayFromVectorOfPose3D(void* vec)
{
   throw_no_vector();
}

cv::_OutputArray* cveOutputArrayFromVectorOfPose3D(void* vec)
{
   throw_no_vector();
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfPose3D(void* vec)
{
   throw_no_vector();
}
#endif

int VectorOfPose3DSizeOfItemInBytes()
{
   throw_no_vector();
}


#endif
