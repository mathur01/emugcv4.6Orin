//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2022 by EMGU Corporation. All rights reserved.
//
//  Vector of LinemodMatch
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------



#include "vector_LinemodMatch.h"

#if defined(HAVE_OPENCV_RGBD)



std::vector< cv::linemod::Match >* VectorOfLinemodMatchCreate() 
{
   return new std::vector< cv::linemod::Match >(); 
}

std::vector< cv::linemod::Match >* VectorOfLinemodMatchCreateSize(int size) 
{
   return new std::vector< cv::linemod::Match >(size); 
}

int VectorOfLinemodMatchGetSize(std::vector< cv::linemod::Match >* v)
{
   return v->size();
}


void VectorOfLinemodMatchPush(std::vector< cv::linemod::Match >* v, cv::linemod::Match* value)
{
   v->push_back(*value);
}

//void VectorOfLinemodMatchPushMulti(std::vector< cv::linemod::Match >* v,  cv::linemod::Match* values, int count)
//{
//   VectorPushMulti< cv::linemod::Match >(v, values, count);
//}

void VectorOfLinemodMatchPushVector(std::vector< cv::linemod::Match >* v, std::vector< cv::linemod::Match >* other)
{
   v->insert(v->end(), other->begin(), other->end());
}

void VectorOfLinemodMatchClear(std::vector< cv::linemod::Match >* v)
{
   v->clear();
}

void VectorOfLinemodMatchRelease(std::vector< cv::linemod::Match >** v)
{
   delete *v;
   *v = 0;
}

void VectorOfLinemodMatchCopyData(std::vector< cv::linemod::Match >* v, cv::linemod::Match* data)
{
   VectorCopyData< cv::linemod::Match >(v, data);
}

cv::linemod::Match* VectorOfLinemodMatchGetStartAddress(std::vector< cv::linemod::Match >* v)
{
   return v->empty() ? NULL : &(*v)[0];
}

int64_t VectorOfLinemodMatchGetMemorySize(std::vector< cv::linemod::Match >* v)
{
   if (v->empty()) return 0;
   return (int64_t) (v->size() * sizeof(cv::linemod::Match));
}

void VectorOfLinemodMatchGetItemPtr(std::vector<  cv::linemod::Match >* vec, int index,  cv::linemod::Match** element)
{
   *element = &vec->at(index);
}

#if false
cv::_InputArray* cveInputArrayFromVectorOfLinemodMatch(std::vector< cv::linemod::Match >* vec)
{
   return new cv::_InputArray(*vec);
}

cv::_OutputArray* cveOutputArrayFromVectorOfLinemodMatch(std::vector< cv::linemod::Match >* vec)
{
   return new cv::_OutputArray(*vec);
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfLinemodMatch(std::vector< cv::linemod::Match >* vec)
{
   return new cv::_InputOutputArray(*vec);
}
#endif

int VectorOfLinemodMatchSizeOfItemInBytes()
{
   return sizeof(cv::linemod::Match);
}

#else

void * VectorOfLinemodMatchCreate()
{
   throw_no_vector();
}

void * VectorOfLinemodMatchCreateSize(int size)
{
   throw_no_vector();
}

int VectorOfLinemodMatchGetSize(void* v)
{
   throw_no_vector();
}

void VectorOfLinemodMatchPush(void* v, void* value)
{
   throw_no_vector();
}

//CVAPI(void) VectorOfLinemodMatchPushMulti(std::vector< cv::linemod::Match >* v, cv::linemod::Match* values, int count);

void VectorOfLinemodMatchPushVector(void* v, void* other)
{
   throw_no_vector();
}

void VectorOfLinemodMatchClear(void* v)
{
   throw_no_vector();
}

void VectorOfLinemodMatchRelease(void** v)
{
   throw_no_vector();
}

void VectorOfLinemodMatchCopyData(void* v, void* data)
{
   throw_no_vector();
}

void* VectorOfLinemodMatchGetStartAddress(void* v)
{
   throw_no_vector();
}

void VectorOfLinemodMatchGetItemPtr(void* vec, int index,  void** element)
{
   throw_no_vector();
}

#if false
cv::_InputArray* cveInputArrayFromVectorOfLinemodMatch(void* vec)
{
   throw_no_vector();
}

cv::_OutputArray* cveOutputArrayFromVectorOfLinemodMatch(void* vec)
{
   throw_no_vector();
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfLinemodMatch(void* vec)
{
   throw_no_vector();
}
#endif

int VectorOfLinemodMatchSizeOfItemInBytes()
{
   throw_no_vector();
}


#endif
