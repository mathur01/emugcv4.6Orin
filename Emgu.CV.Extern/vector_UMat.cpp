//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2022 by EMGU Corporation. All rights reserved.
//
//  Vector of UMat
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------



#include "vector_UMat.h"

#if 1



std::vector< cv::UMat >* VectorOfUMatCreate() 
{
   return new std::vector< cv::UMat >(); 
}

std::vector< cv::UMat >* VectorOfUMatCreateSize(int size) 
{
   return new std::vector< cv::UMat >(size); 
}

int VectorOfUMatGetSize(std::vector< cv::UMat >* v)
{
   return v->size();
}


void VectorOfUMatPush(std::vector< cv::UMat >* v, cv::UMat* value)
{
   v->push_back(*value);
}

//void VectorOfUMatPushMulti(std::vector< cv::UMat >* v,  cv::UMat* values, int count)
//{
//   VectorPushMulti< cv::UMat >(v, values, count);
//}

void VectorOfUMatPushVector(std::vector< cv::UMat >* v, std::vector< cv::UMat >* other)
{
   v->insert(v->end(), other->begin(), other->end());
}

void VectorOfUMatClear(std::vector< cv::UMat >* v)
{
   v->clear();
}

void VectorOfUMatRelease(std::vector< cv::UMat >** v)
{
   delete *v;
   *v = 0;
}

void VectorOfUMatCopyData(std::vector< cv::UMat >* v, cv::UMat* data)
{
   VectorCopyData< cv::UMat >(v, data);
}

cv::UMat* VectorOfUMatGetStartAddress(std::vector< cv::UMat >* v)
{
   return v->empty() ? NULL : &(*v)[0];
}

int64_t VectorOfUMatGetMemorySize(std::vector< cv::UMat >* v)
{
   if (v->empty()) return 0;
   return (int64_t) (v->size() * sizeof(cv::UMat));
}

void VectorOfUMatGetItemPtr(std::vector<  cv::UMat >* vec, int index,  cv::UMat** element)
{
   *element = &vec->at(index);
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfUMat(std::vector< cv::UMat >* vec)
{
   return new cv::_InputArray(*vec);
}

cv::_OutputArray* cveOutputArrayFromVectorOfUMat(std::vector< cv::UMat >* vec)
{
   return new cv::_OutputArray(*vec);
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfUMat(std::vector< cv::UMat >* vec)
{
   return new cv::_InputOutputArray(*vec);
}
#endif

int VectorOfUMatSizeOfItemInBytes()
{
   return sizeof(cv::UMat);
}

#else

void * VectorOfUMatCreate()
{
   throw_no_vector();
}

void * VectorOfUMatCreateSize(int size)
{
   throw_no_vector();
}

int VectorOfUMatGetSize(void* v)
{
   throw_no_vector();
}

void VectorOfUMatPush(void* v, void* value)
{
   throw_no_vector();
}

//CVAPI(void) VectorOfUMatPushMulti(std::vector< cv::UMat >* v, cv::UMat* values, int count);

void VectorOfUMatPushVector(void* v, void* other)
{
   throw_no_vector();
}

void VectorOfUMatClear(void* v)
{
   throw_no_vector();
}

void VectorOfUMatRelease(void** v)
{
   throw_no_vector();
}

void VectorOfUMatCopyData(void* v, void* data)
{
   throw_no_vector();
}

void* VectorOfUMatGetStartAddress(void* v)
{
   throw_no_vector();
}

void VectorOfUMatGetItemPtr(void* vec, int index,  void** element)
{
   throw_no_vector();
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfUMat(void* vec)
{
   throw_no_vector();
}

cv::_OutputArray* cveOutputArrayFromVectorOfUMat(void* vec)
{
   throw_no_vector();
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfUMat(void* vec)
{
   throw_no_vector();
}
#endif

int VectorOfUMatSizeOfItemInBytes()
{
   throw_no_vector();
}


#endif
