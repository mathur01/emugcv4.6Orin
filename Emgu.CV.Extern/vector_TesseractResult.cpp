//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2022 by EMGU Corporation. All rights reserved.
//
//  Vector of TesseractResult
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------



#include "vector_TesseractResult.h"

#if defined(HAVE_EMGUCV_TESSERACT)



std::vector< TesseractResult >* VectorOfTesseractResultCreate() 
{ 
   return new std::vector< TesseractResult >(); 
}

std::vector< TesseractResult >* VectorOfTesseractResultCreateSize(int size) 
{ 
   return new std::vector< TesseractResult >(size); 
}

int VectorOfTesseractResultGetSize(std::vector< TesseractResult >* v)
{
   return v->size();
}

void VectorOfTesseractResultPush(std::vector< TesseractResult >* v, TesseractResult* value)
{
   v->push_back(*value);
}

void VectorOfTesseractResultPushMulti(std::vector< TesseractResult >* v,  TesseractResult* values, int count)
{
   VectorPushMulti< TesseractResult >(v, values, count);
}

void VectorOfTesseractResultPushVector(std::vector< TesseractResult >* v, std::vector< TesseractResult >* other)
{  
   VectorOfTesseractResultPushMulti(v,  &(*other)[0], other->size());
}

void VectorOfTesseractResultClear(std::vector< TesseractResult >* v)
{
   v->clear();
}

void VectorOfTesseractResultRelease(std::vector< TesseractResult >** v)
{
   delete *v;
   *v = 0;
}

void VectorOfTesseractResultCopyData(std::vector< TesseractResult >* v, TesseractResult* data)
{
   VectorCopyData< TesseractResult >(v, data);
}

TesseractResult* VectorOfTesseractResultGetStartAddress(std::vector< TesseractResult >* v)
{
   return v->empty() ? NULL : &(*v)[0];
}

int64_t VectorOfTesseractResultGetMemorySize(std::vector< TesseractResult >* v)
{
   if (v->empty()) return 0;
   return (int64_t) (v->size() * sizeof(TesseractResult));
}

void VectorOfTesseractResultGetItem(std::vector<  TesseractResult >* vec, int index,  TesseractResult * element)
{
   *element = vec->at(index);
}

void VectorOfTesseractResultGetItemPtr(std::vector<  TesseractResult >* vec, int index,  TesseractResult** element)
{ 
	*element = &vec->at(index);
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfTesseractResult(std::vector< TesseractResult >* vec)
{
   return new cv::_InputArray(*vec);
}

cv::_OutputArray* cveOutputArrayFromVectorOfTesseractResult(std::vector< TesseractResult >* vec)
{
   return new cv::_OutputArray(*vec);
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfTesseractResult(std::vector< TesseractResult >* vec)
{
   return new cv::_InputOutputArray(*vec);
}
#endif

int VectorOfTesseractResultSizeOfItemInBytes()
{
   return sizeof(TesseractResult);
}

#else

void* VectorOfTesseractResultCreate()
{
  throw_no_vector();
}

void* VectorOfTesseractResultCreateSize(int size)
{
  throw_no_vector();
}

int VectorOfTesseractResultGetSize(void* v)
{
  throw_no_vector();
}

void VectorOfTesseractResultPush(void* v, void* value)
{
  throw_no_vector();
}

void VectorOfTesseractResultPushMulti(void* v, void* values, int count)
{
  throw_no_vector();
}

void VectorOfTesseractResultPushVector(void* v, void* other)
{
  throw_no_vector();
}

void VectorOfTesseractResultClear(void* v)
{
  throw_no_vector();
}

void VectorOfTesseractResultRelease(void** v)
{
  throw_no_vector();
}

void VectorOfTesseractResultCopyData(void* v,  void* data)
{
  throw_no_vector();
}

void* VectorOfTesseractResultGetStartAddress(void* v)
{
  throw_no_vector();
}

void VectorOfTesseractResultGetItem(void* vec, int index, void* element)
{
  throw_no_vector();
}

void VectorOfTesseractResultGetItemPtr(void* vec, int index, void** element)
{
  throw_no_vector();
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfTesseractResult(void* vec)
{
  throw_no_vector();
}

cv::_OutputArray* cveOutputArrayFromVectorOfTesseractResult(void* vec)
{
  throw_no_vector();
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfTesseractResult(void* vec)
{
  throw_no_vector();
}
#endif
 
int VectorOfTesseractResultSizeOfItemInBytes()
{
  throw_no_vector();
}

#endif
