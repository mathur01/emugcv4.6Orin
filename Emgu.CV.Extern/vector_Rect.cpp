//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2022 by EMGU Corporation. All rights reserved.
//
//  Vector of Rect
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------



#include "vector_Rect.h"

#if 1



std::vector< cv::Rect >* VectorOfRectCreate() 
{ 
   return new std::vector< cv::Rect >(); 
}

std::vector< cv::Rect >* VectorOfRectCreateSize(int size) 
{ 
   return new std::vector< cv::Rect >(size); 
}

int VectorOfRectGetSize(std::vector< cv::Rect >* v)
{
   return v->size();
}

void VectorOfRectPush(std::vector< cv::Rect >* v, cv::Rect* value)
{
   v->push_back(*value);
}

void VectorOfRectPushMulti(std::vector< cv::Rect >* v,  cv::Rect* values, int count)
{
   VectorPushMulti< cv::Rect >(v, values, count);
}

void VectorOfRectPushVector(std::vector< cv::Rect >* v, std::vector< cv::Rect >* other)
{  
   VectorOfRectPushMulti(v,  &(*other)[0], other->size());
}

void VectorOfRectClear(std::vector< cv::Rect >* v)
{
   v->clear();
}

void VectorOfRectRelease(std::vector< cv::Rect >** v)
{
   delete *v;
   *v = 0;
}

void VectorOfRectCopyData(std::vector< cv::Rect >* v, cv::Rect* data)
{
   VectorCopyData< cv::Rect >(v, data);
}

cv::Rect* VectorOfRectGetStartAddress(std::vector< cv::Rect >* v)
{
   return v->empty() ? NULL : &(*v)[0];
}

int64_t VectorOfRectGetMemorySize(std::vector< cv::Rect >* v)
{
   if (v->empty()) return 0;
   return (int64_t) (v->size() * sizeof(cv::Rect));
}

void VectorOfRectGetItem(std::vector<  cv::Rect >* vec, int index,  cv::Rect * element)
{
   *element = vec->at(index);
}

void VectorOfRectGetItemPtr(std::vector<  cv::Rect >* vec, int index,  cv::Rect** element)
{ 
	*element = &vec->at(index);
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfRect(std::vector< cv::Rect >* vec)
{
   return new cv::_InputArray(*vec);
}

cv::_OutputArray* cveOutputArrayFromVectorOfRect(std::vector< cv::Rect >* vec)
{
   return new cv::_OutputArray(*vec);
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfRect(std::vector< cv::Rect >* vec)
{
   return new cv::_InputOutputArray(*vec);
}
#endif

int VectorOfRectSizeOfItemInBytes()
{
   return sizeof(cv::Rect);
}

#else

void* VectorOfRectCreate()
{
  throw_no_vector();
}

void* VectorOfRectCreateSize(int size)
{
  throw_no_vector();
}

int VectorOfRectGetSize(void* v)
{
  throw_no_vector();
}

void VectorOfRectPush(void* v, void* value)
{
  throw_no_vector();
}

void VectorOfRectPushMulti(void* v, void* values, int count)
{
  throw_no_vector();
}

void VectorOfRectPushVector(void* v, void* other)
{
  throw_no_vector();
}

void VectorOfRectClear(void* v)
{
  throw_no_vector();
}

void VectorOfRectRelease(void** v)
{
  throw_no_vector();
}

void VectorOfRectCopyData(void* v,  void* data)
{
  throw_no_vector();
}

void* VectorOfRectGetStartAddress(void* v)
{
  throw_no_vector();
}

void VectorOfRectGetItem(void* vec, int index, void* element)
{
  throw_no_vector();
}

void VectorOfRectGetItemPtr(void* vec, int index, void** element)
{
  throw_no_vector();
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfRect(void* vec)
{
  throw_no_vector();
}

cv::_OutputArray* cveOutputArrayFromVectorOfRect(void* vec)
{
  throw_no_vector();
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfRect(void* vec)
{
  throw_no_vector();
}
#endif
 
int VectorOfRectSizeOfItemInBytes()
{
  throw_no_vector();
}

#endif
