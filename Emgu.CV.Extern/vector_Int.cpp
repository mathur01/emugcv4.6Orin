//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2022 by EMGU Corporation. All rights reserved.
//
//  Vector of Int
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------



#include "vector_Int.h"

#if 1



std::vector< int >* VectorOfIntCreate() 
{ 
   return new std::vector< int >(); 
}

std::vector< int >* VectorOfIntCreateSize(int size) 
{ 
   return new std::vector< int >(size); 
}

int VectorOfIntGetSize(std::vector< int >* v)
{
   return v->size();
}

void VectorOfIntPush(std::vector< int >* v, int* value)
{
   v->push_back(*value);
}

void VectorOfIntPushMulti(std::vector< int >* v,  int* values, int count)
{
   VectorPushMulti< int >(v, values, count);
}

void VectorOfIntPushVector(std::vector< int >* v, std::vector< int >* other)
{  
   VectorOfIntPushMulti(v,  &(*other)[0], other->size());
}

void VectorOfIntClear(std::vector< int >* v)
{
   v->clear();
}

void VectorOfIntRelease(std::vector< int >** v)
{
   delete *v;
   *v = 0;
}

void VectorOfIntCopyData(std::vector< int >* v, int* data)
{
   VectorCopyData< int >(v, data);
}

int* VectorOfIntGetStartAddress(std::vector< int >* v)
{
   return v->empty() ? NULL : &(*v)[0];
}

int64_t VectorOfIntGetMemorySize(std::vector< int >* v)
{
   if (v->empty()) return 0;
   return (int64_t) (v->size() * sizeof(int));
}

void VectorOfIntGetItem(std::vector<  int >* vec, int index,  int * element)
{
   *element = vec->at(index);
}

void VectorOfIntGetItemPtr(std::vector<  int >* vec, int index,  int** element)
{ 
	*element = &vec->at(index);
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfInt(std::vector< int >* vec)
{
   return new cv::_InputArray(*vec);
}

cv::_OutputArray* cveOutputArrayFromVectorOfInt(std::vector< int >* vec)
{
   return new cv::_OutputArray(*vec);
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfInt(std::vector< int >* vec)
{
   return new cv::_InputOutputArray(*vec);
}
#endif

int VectorOfIntSizeOfItemInBytes()
{
   return sizeof(int);
}

#else

void* VectorOfIntCreate()
{
  throw_no_vector();
}

void* VectorOfIntCreateSize(int size)
{
  throw_no_vector();
}

int VectorOfIntGetSize(void* v)
{
  throw_no_vector();
}

void VectorOfIntPush(void* v, void* value)
{
  throw_no_vector();
}

void VectorOfIntPushMulti(void* v, void* values, int count)
{
  throw_no_vector();
}

void VectorOfIntPushVector(void* v, void* other)
{
  throw_no_vector();
}

void VectorOfIntClear(void* v)
{
  throw_no_vector();
}

void VectorOfIntRelease(void** v)
{
  throw_no_vector();
}

void VectorOfIntCopyData(void* v,  void* data)
{
  throw_no_vector();
}

void* VectorOfIntGetStartAddress(void* v)
{
  throw_no_vector();
}

void VectorOfIntGetItem(void* vec, int index, void* element)
{
  throw_no_vector();
}

void VectorOfIntGetItemPtr(void* vec, int index, void** element)
{
  throw_no_vector();
}

#if true
cv::_InputArray* cveInputArrayFromVectorOfInt(void* vec)
{
  throw_no_vector();
}

cv::_OutputArray* cveOutputArrayFromVectorOfInt(void* vec)
{
  throw_no_vector();
}

cv::_InputOutputArray* cveInputOutputArrayFromVectorOfInt(void* vec)
{
  throw_no_vector();
}
#endif
 
int VectorOfIntSizeOfItemInBytes()
{
  throw_no_vector();
}

#endif
